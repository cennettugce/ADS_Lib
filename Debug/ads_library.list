
ads_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005330  08005330  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000068  080053a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080053a0  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f205  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239d  00000000  00000000  0002f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00031680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd8  00000000  00000000  000325b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018279  00000000  00000000  00033188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110b5  00000000  00000000  0004b401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095443  00000000  00000000  0005c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004950  00000000  00000000  000f18fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f624c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800515c 	.word	0x0800515c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800515c 	.word	0x0800515c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI3_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_SPI3_Init+0x64>)
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <MX_SPI3_Init+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_SPI3_Init+0x64>)
 8000588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800058c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_SPI3_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_SPI3_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_SPI3_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005b0:	2218      	movs	r2, #24
 80005b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005c8:	220a      	movs	r2, #10
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_SPI3_Init+0x64>)
 80005ce:	f002 f9bf 	bl	8002950 <HAL_SPI_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80005d8:	f000 ffa6 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000084 	.word	0x20000084
 80005e4:	40003c00 	.word	0x40003c00

080005e8 <getRegisterValue>:
//!
//! \return unsigned 16-bit register value.
//
//*****************************************************************************
uint16_t getRegisterValue(uint8_t address)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
    assert(address < NUM_REGISTERS);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b3f      	cmp	r3, #63	; 0x3f
 80005f6:	d905      	bls.n	8000604 <getRegisterValue+0x1c>
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <getRegisterValue+0x2c>)
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <getRegisterValue+0x30>)
 80005fc:	217a      	movs	r1, #122	; 0x7a
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <getRegisterValue+0x34>)
 8000600:	f003 fdfa 	bl	80041f8 <__assert_func>
    return registerMap[address];
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <getRegisterValue+0x38>)
 8000608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	08005174 	.word	0x08005174
 8000618:	08005258 	.word	0x08005258
 800061c:	0800518c 	.word	0x0800518c
 8000620:	200000dc 	.word	0x200000dc

08000624 <adcStartup>:
//!
//! \return None.
//
//*****************************************************************************
void adcStartup(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	 //(OPTIONAL) Provide additional delay time for power supply settling
	HAL_Delay(50);
 800062a:	2032      	movs	r0, #50	; 0x32
 800062c:	f001 fa38 	bl	8001aa0 <HAL_Delay>

	 //(REQUIRED) Set nRESET pin high for ADC operation
	setSYNC_RESET(HIGH);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fcc3 	bl	8000fbc <setSYNC_RESET>

	 //(OPTIONAL) Toggle nRESET pin to ensure default register settings.
	 //NOTE: This also ensures that the device registers are unlocked.
	toggleRESET();
 8000636:	f000 fcd7 	bl	8000fe8 <toggleRESET>

     //(REQUIRED) Initialize internal 'registerMap' array with device default settings
	restoreRegisterDefaults();
 800063a:	f000 fb5f 	bl	8000cfc <restoreRegisterDefaults>

     //(OPTIONAL) Validate first response word when beginning SPI communication: (0xFF20 | CHANCNT)
	uint16_t response = sendCommand(OPCODE_NULL);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fad2 	bl	8000be8 <sendCommand>
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
    //writeSingleRegister(MODE_ADDRESS, MODE_DEFAULT);

     //(OPTIONAL) Read back all registers

	 //(OPTIONAL) Check STATUS register for faults
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <readSingleRegister>:
//!
//! \return Returns the 8-bit register read result.
//
//*****************************************************************************
uint16_t readSingleRegister(uint8_t address)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	//heck that the register address is in range
	assert(address < NUM_REGISTERS);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b3f      	cmp	r3, #63	; 0x3f
 800065e:	d905      	bls.n	800066c <readSingleRegister+0x1c>
 8000660:	4b77      	ldr	r3, [pc, #476]	; (8000840 <readSingleRegister+0x1f0>)
 8000662:	4a78      	ldr	r2, [pc, #480]	; (8000844 <readSingleRegister+0x1f4>)
 8000664:	21bd      	movs	r1, #189	; 0xbd
 8000666:	4878      	ldr	r0, [pc, #480]	; (8000848 <readSingleRegister+0x1f8>)
 8000668:	f003 fdc6 	bl	80041f8 <__assert_func>
// Build TX and RX byte array
#ifdef ENABLE_CRC_IN
    uint8_t dataTx[8] = { 0 };      // 2 words, up to 4 bytes each = 8 bytes maximum
    uint8_t dataRx[8] = { 0 };
#else
    uint8_t dataTx[3] = { 0 };      // 1 word, up to 4 bytes long = 4 bytes maximum
 800066c:	4b77      	ldr	r3, [pc, #476]	; (800084c <readSingleRegister+0x1fc>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	833b      	strh	r3, [r7, #24]
 8000672:	2300      	movs	r3, #0
 8000674:	76bb      	strb	r3, [r7, #26]
    uint8_t dataRx[3] = { 0 };
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <readSingleRegister+0x1fc>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	82bb      	strh	r3, [r7, #20]
 800067c:	2300      	movs	r3, #0
 800067e:	75bb      	strb	r3, [r7, #22]
    uint8_t dataRx2[3] = { 0 };
 8000680:	4b72      	ldr	r3, [pc, #456]	; (800084c <readSingleRegister+0x1fc>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	823b      	strh	r3, [r7, #16]
 8000686:	2300      	movs	r3, #0
 8000688:	74bb      	strb	r3, [r7, #18]
#endif
    uint16_t opcode = OPCODE_RREG | (((uint16_t) address) << 7);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	01db      	lsls	r3, r3, #7
 800068e:	b21a      	sxth	r2, r3
 8000690:	4b6f      	ldr	r3, [pc, #444]	; (8000850 <readSingleRegister+0x200>)
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29b      	uxth	r3, r3
 8000698:	81fb      	strh	r3, [r7, #14]
    uint8_t numberOfBytes = buildSPIarray(&opcode, 1, dataTx);
 800069a:	f107 0218 	add.w	r2, r7, #24
 800069e:	f107 030e 	add.w	r3, r7, #14
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fbed 	bl	8000e84 <buildSPIarray>
 80006aa:	4603      	mov	r3, r0
 80006ac:	77bb      	strb	r3, [r7, #30]

    GPIO_PinState DRDY_state =HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	4868      	ldr	r0, [pc, #416]	; (8000854 <readSingleRegister+0x204>)
 80006b4:	f001 fc82 	bl	8001fbc <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	77fb      	strb	r3, [r7, #31]
    while(DRDY_state != GPIO_PIN_RESET){
 80006bc:	e006      	b.n	80006cc <readSingleRegister+0x7c>
    	DRDY_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80006be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c2:	4864      	ldr	r0, [pc, #400]	; (8000854 <readSingleRegister+0x204>)
 80006c4:	f001 fc7a 	bl	8001fbc <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	77fb      	strb	r3, [r7, #31]
    while(DRDY_state != GPIO_PIN_RESET){
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f5      	bne.n	80006be <readSingleRegister+0x6e>
    }
    // Set the nCS pin LOW
    setCS(LOW);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fc58 	bl	8000f88 <setCS>
    HAL_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f001 f9e1 	bl	8001aa0 <HAL_Delay>

	// [FRAME 1] Send RREG command

    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE,(uint8_t*) dataTx,(uint8_t*)dataRx2, 3, 100);
 80006de:	f107 0210 	add.w	r2, r7, #16
 80006e2:	f107 0118 	add.w	r1, r7, #24
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2303      	movs	r3, #3
 80006ec:	485a      	ldr	r0, [pc, #360]	; (8000858 <readSingleRegister+0x208>)
 80006ee:	f002 f9b8 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx, 3, 100);
 80006f2:	f107 0214 	add.w	r2, r7, #20
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2303      	movs	r3, #3
 80006fc:	2100      	movs	r1, #0
 80006fe:	4856      	ldr	r0, [pc, #344]	; (8000858 <readSingleRegister+0x208>)
 8000700:	f002 f9af 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx, 3, 100);
 8000704:	f107 0214 	add.w	r2, r7, #20
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2303      	movs	r3, #3
 800070e:	2100      	movs	r1, #0
 8000710:	4851      	ldr	r0, [pc, #324]	; (8000858 <readSingleRegister+0x208>)
 8000712:	f002 f9a6 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx, 3, 100);
 8000716:	f107 0214 	add.w	r2, r7, #20
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2303      	movs	r3, #3
 8000720:	2100      	movs	r1, #0
 8000722:	484d      	ldr	r0, [pc, #308]	; (8000858 <readSingleRegister+0x208>)
 8000724:	f002 f99d 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx, 3, 100);
 8000728:	f107 0214 	add.w	r2, r7, #20
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2303      	movs	r3, #3
 8000732:	2100      	movs	r1, #0
 8000734:	4848      	ldr	r0, [pc, #288]	; (8000858 <readSingleRegister+0x208>)
 8000736:	f002 f994 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx, 3, 100);
 800073a:	f107 0214 	add.w	r2, r7, #20
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2303      	movs	r3, #3
 8000744:	2100      	movs	r1, #0
 8000746:	4844      	ldr	r0, [pc, #272]	; (8000858 <readSingleRegister+0x208>)
 8000748:	f002 f98b 	bl	8002a62 <HAL_SPI_TransmitReceive>


    HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f001 f9a7 	bl	8001aa0 <HAL_Delay>
    // Set the nCS pin HIGH
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_SET){
 8000752:	bf00      	nop
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	483e      	ldr	r0, [pc, #248]	; (8000854 <readSingleRegister+0x204>)
 800075a:	f001 fc2f 	bl	8001fbc <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	d1f7      	bne.n	8000754 <readSingleRegister+0x104>

    }
    setCS(HIGH);
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fc0f 	bl	8000f88 <setCS>


    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_RESET){
 800076a:	bf00      	nop
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4838      	ldr	r0, [pc, #224]	; (8000854 <readSingleRegister+0x204>)
 8000772:	f001 fc23 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f7      	bne.n	800076c <readSingleRegister+0x11c>
       }
    setCS(LOW);
 800077c:	2000      	movs	r0, #0
 800077e:	f000 fc03 	bl	8000f88 <setCS>

       HAL_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f001 f98c 	bl	8001aa0 <HAL_Delay>
   	// [FRAME 1] Send RREG command

       HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE,(uint8_t*) dataTx,(uint8_t*)dataRx, 3, 100);
 8000788:	f107 0214 	add.w	r2, r7, #20
 800078c:	f107 0118 	add.w	r1, r7, #24
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2303      	movs	r3, #3
 8000796:	4830      	ldr	r0, [pc, #192]	; (8000858 <readSingleRegister+0x208>)
 8000798:	f002 f963 	bl	8002a62 <HAL_SPI_TransmitReceive>
       HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx2, 3, 100);
 800079c:	f107 0210 	add.w	r2, r7, #16
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2303      	movs	r3, #3
 80007a6:	2100      	movs	r1, #0
 80007a8:	482b      	ldr	r0, [pc, #172]	; (8000858 <readSingleRegister+0x208>)
 80007aa:	f002 f95a 	bl	8002a62 <HAL_SPI_TransmitReceive>
       HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx2, 3, 100);
 80007ae:	f107 0210 	add.w	r2, r7, #16
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2303      	movs	r3, #3
 80007b8:	2100      	movs	r1, #0
 80007ba:	4827      	ldr	r0, [pc, #156]	; (8000858 <readSingleRegister+0x208>)
 80007bc:	f002 f951 	bl	8002a62 <HAL_SPI_TransmitReceive>
       HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx2, 3, 100);
 80007c0:	f107 0210 	add.w	r2, r7, #16
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2303      	movs	r3, #3
 80007ca:	2100      	movs	r1, #0
 80007cc:	4822      	ldr	r0, [pc, #136]	; (8000858 <readSingleRegister+0x208>)
 80007ce:	f002 f948 	bl	8002a62 <HAL_SPI_TransmitReceive>
       HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx2, 3, 100);
 80007d2:	f107 0210 	add.w	r2, r7, #16
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2303      	movs	r3, #3
 80007dc:	2100      	movs	r1, #0
 80007de:	481e      	ldr	r0, [pc, #120]	; (8000858 <readSingleRegister+0x208>)
 80007e0:	f002 f93f 	bl	8002a62 <HAL_SPI_TransmitReceive>
       HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx2, 3, 100);
 80007e4:	f107 0210 	add.w	r2, r7, #16
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2303      	movs	r3, #3
 80007ee:	2100      	movs	r1, #0
 80007f0:	4819      	ldr	r0, [pc, #100]	; (8000858 <readSingleRegister+0x208>)
 80007f2:	f002 f936 	bl	8002a62 <HAL_SPI_TransmitReceive>

       HAL_Delay(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f001 f952 	bl	8001aa0 <HAL_Delay>
       // Set the nCS pin HIGH
       while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_SET){
 80007fc:	bf00      	nop
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <readSingleRegister+0x204>)
 8000804:	f001 fbda 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d1f7      	bne.n	80007fe <readSingleRegister+0x1ae>

         }
         setCS(HIGH);
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fbba 	bl	8000f88 <setCS>

    uint16_t adcResponse = combineBytes(dataRx[0], dataRx[1]);
 8000814:	7d3b      	ldrb	r3, [r7, #20]
 8000816:	7d7a      	ldrb	r2, [r7, #21]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 faf8 	bl	8000e10 <combineBytes>
 8000820:	4603      	mov	r3, r0
 8000822:	83bb      	strh	r3, [r7, #28]
    registerMap[address] = adcResponse;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <readSingleRegister+0x20c>)
 8000828:	8bba      	ldrh	r2, [r7, #28]
 800082a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// [FRAME 2] Send NULL command to retrieve the register data
	//registerMap[address] = sendCommand(OPCODE_NULL);

	return registerMap[address];
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <readSingleRegister+0x20c>)
 8000832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	08005174 	.word	0x08005174
 8000844:	0800526c 	.word	0x0800526c
 8000848:	0800518c 	.word	0x0800518c
 800084c:	080051a4 	.word	0x080051a4
 8000850:	ffffa000 	.word	0xffffa000
 8000854:	40020000 	.word	0x40020000
 8000858:	20000084 	.word	0x20000084
 800085c:	200000dc 	.word	0x200000dc

08000860 <writeSingleRegister>:
//!
//! \return None.
//
//*****************************************************************************
void writeSingleRegister(uint8_t address, uint16_t data)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af02      	add	r7, sp, #8
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	80bb      	strh	r3, [r7, #4]
     //Check that the register address is in range
    assert(address < NUM_REGISTERS);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b3f      	cmp	r3, #63	; 0x3f
 8000874:	d906      	bls.n	8000884 <writeSingleRegister+0x24>
 8000876:	4b63      	ldr	r3, [pc, #396]	; (8000a04 <writeSingleRegister+0x1a4>)
 8000878:	4a63      	ldr	r2, [pc, #396]	; (8000a08 <writeSingleRegister+0x1a8>)
 800087a:	f240 1115 	movw	r1, #277	; 0x115
 800087e:	4863      	ldr	r0, [pc, #396]	; (8000a0c <writeSingleRegister+0x1ac>)
 8000880:	f003 fcba 	bl	80041f8 <__assert_func>

    // (OPTIONAL) Enforce certain register field values when
    // writing to the MODE register to fix the operation mode
    if (MODE_ADDRESS == address)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d105      	bne.n	8000896 <writeSingleRegister+0x36>
    {
        data = enforce_selected_device_modes(data);
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fb49 	bl	8000f24 <enforce_selected_device_modes>
 8000892:	4603      	mov	r3, r0
 8000894:	80bb      	strh	r3, [r7, #4]
    // Build TX and RX byte array
#ifdef ENABLE_CRC_IN
    uint8_t dataTx[12] = { 0 };     // 3 words, up to 4 bytes each = 12 bytes maximum
    uint8_t dataRx[12] = { 0 };
#else
    uint8_t dataTx[3] = { 0 };
 8000896:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <writeSingleRegister+0x1b0>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	843b      	strh	r3, [r7, #32]
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uint8_t dataTx2[3] = { 0 }; // 2 words, up to 4 bytes long = 8 bytes maximum
 80008a2:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <writeSingleRegister+0x1b0>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	83bb      	strh	r3, [r7, #28]
 80008a8:	2300      	movs	r3, #0
 80008aa:	77bb      	strb	r3, [r7, #30]
    uint8_t dataRx[3] = { 0 };
 80008ac:	4b58      	ldr	r3, [pc, #352]	; (8000a10 <writeSingleRegister+0x1b0>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	833b      	strh	r3, [r7, #24]
 80008b2:	2300      	movs	r3, #0
 80008b4:	76bb      	strb	r3, [r7, #26]
    uint8_t dataRx2[3] = { 0 };
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <writeSingleRegister+0x1b0>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	82bb      	strh	r3, [r7, #20]
 80008bc:	2300      	movs	r3, #0
 80008be:	75bb      	strb	r3, [r7, #22]
    uint8_t dataRx3[3] = { 0 };
 80008c0:	4b53      	ldr	r3, [pc, #332]	; (8000a10 <writeSingleRegister+0x1b0>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	823b      	strh	r3, [r7, #16]
 80008c6:	2300      	movs	r3, #0
 80008c8:	74bb      	strb	r3, [r7, #18]
#endif
    uint16_t opcodes[2];
    opcodes[0] = OPCODE_WREG | (((uint16_t) address) << 7);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	01db      	lsls	r3, r3, #7
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	81bb      	strh	r3, [r7, #12]
    opcodes[1] = data;
 80008da:	88bb      	ldrh	r3, [r7, #4]
 80008dc:	81fb      	strh	r3, [r7, #14]
    uint8_t numberOfBytes = buildSPIarray(&opcodes[0], 1, dataTx);
 80008de:	f107 0220 	add.w	r2, r7, #32
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 facb 	bl	8000e84 <buildSPIarray>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    numberOfBytes = buildSPIarray(&opcodes[1], 1, dataTx2);
 80008f4:	f107 021c 	add.w	r2, r7, #28
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	3302      	adds	r3, #2
 80008fe:	2101      	movs	r1, #1
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fabf 	bl	8000e84 <buildSPIarray>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    GPIO_PinState DRDY_state =HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800090c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000910:	4840      	ldr	r0, [pc, #256]	; (8000a14 <writeSingleRegister+0x1b4>)
 8000912:	f001 fb53 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(DRDY_state != GPIO_PIN_RESET){
 800091c:	e007      	b.n	800092e <writeSingleRegister+0xce>
    	DRDY_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	483c      	ldr	r0, [pc, #240]	; (8000a14 <writeSingleRegister+0x1b4>)
 8000924:	f001 fb4a 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(DRDY_state != GPIO_PIN_RESET){
 800092e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f3      	bne.n	800091e <writeSingleRegister+0xbe>
    }
    setCS(LOW);
 8000936:	2000      	movs	r0, #0
 8000938:	f000 fb26 	bl	8000f88 <setCS>
    HAL_Delay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f001 f8af 	bl	8001aa0 <HAL_Delay>
    // Send command
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, dataTx, dataRx2, numberOfBytes, 100);
 8000942:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000946:	b29b      	uxth	r3, r3
 8000948:	f107 0214 	add.w	r2, r7, #20
 800094c:	f107 0120 	add.w	r1, r7, #32
 8000950:	2064      	movs	r0, #100	; 0x64
 8000952:	9000      	str	r0, [sp, #0]
 8000954:	4830      	ldr	r0, [pc, #192]	; (8000a18 <writeSingleRegister+0x1b8>)
 8000956:	f002 f884 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, dataTx2, dataRx3, numberOfBytes, 100);
 800095a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800095e:	b29b      	uxth	r3, r3
 8000960:	f107 0210 	add.w	r2, r7, #16
 8000964:	f107 011c 	add.w	r1, r7, #28
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	9000      	str	r0, [sp, #0]
 800096c:	482a      	ldr	r0, [pc, #168]	; (8000a18 <writeSingleRegister+0x1b8>)
 800096e:	f002 f878 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, 0x00, dataRx, numberOfBytes, 100);
 8000972:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000976:	b29b      	uxth	r3, r3
 8000978:	f107 0218 	add.w	r2, r7, #24
 800097c:	2164      	movs	r1, #100	; 0x64
 800097e:	9100      	str	r1, [sp, #0]
 8000980:	2100      	movs	r1, #0
 8000982:	4825      	ldr	r0, [pc, #148]	; (8000a18 <writeSingleRegister+0x1b8>)
 8000984:	f002 f86d 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, 0x00, dataRx, numberOfBytes, 100);
 8000988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800098c:	b29b      	uxth	r3, r3
 800098e:	f107 0218 	add.w	r2, r7, #24
 8000992:	2164      	movs	r1, #100	; 0x64
 8000994:	9100      	str	r1, [sp, #0]
 8000996:	2100      	movs	r1, #0
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <writeSingleRegister+0x1b8>)
 800099a:	f002 f862 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, 0x00, dataRx, numberOfBytes, 100);
 800099e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	f107 0218 	add.w	r2, r7, #24
 80009a8:	2164      	movs	r1, #100	; 0x64
 80009aa:	9100      	str	r1, [sp, #0]
 80009ac:	2100      	movs	r1, #0
 80009ae:	481a      	ldr	r0, [pc, #104]	; (8000a18 <writeSingleRegister+0x1b8>)
 80009b0:	f002 f857 	bl	8002a62 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, 0x00, dataRx, numberOfBytes, 100);
 80009b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f107 0218 	add.w	r2, r7, #24
 80009be:	2164      	movs	r1, #100	; 0x64
 80009c0:	9100      	str	r1, [sp, #0]
 80009c2:	2100      	movs	r1, #0
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <writeSingleRegister+0x1b8>)
 80009c6:	f002 f84c 	bl	8002a62 <HAL_SPI_TransmitReceive>
    // Update internal array
    HAL_Delay(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f001 f868 	bl	8001aa0 <HAL_Delay>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_SET){
 80009d0:	bf00      	nop
 80009d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <writeSingleRegister+0x1b4>)
 80009d8:	f001 faf0 	bl	8001fbc <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d1f7      	bne.n	80009d2 <writeSingleRegister+0x172>

      }
    setCS(LOW);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 fad0 	bl	8000f88 <setCS>

    registerMap[address] = data;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	490c      	ldr	r1, [pc, #48]	; (8000a1c <writeSingleRegister+0x1bc>)
 80009ec:	88ba      	ldrh	r2, [r7, #4]
 80009ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // (RECOMMENDED) Read back register to confirm register write was successful
    readSingleRegister(address);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe2b 	bl	8000650 <readSingleRegister>

    // NOTE: Enabling the CRC words in the SPI command will NOT prevent an invalid W
}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08005174 	.word	0x08005174
 8000a08:	08005280 	.word	0x08005280
 8000a0c:	0800518c 	.word	0x0800518c
 8000a10:	080051a4 	.word	0x080051a4
 8000a14:	40020000 	.word	0x40020000
 8000a18:	20000084 	.word	0x20000084
 8000a1c:	200000dc 	.word	0x200000dc

08000a20 <readData>:
//!
//! \return Returns true if the CRC-OUT of the data read detects an error.
//
//*****************************************************************************
bool readData(adc_channel_data *DataStruct)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
    int i;
    uint8_t crcTx[3]                        = { 0 };
 8000a28:	4b6b      	ldr	r3, [pc, #428]	; (8000bd8 <readData+0x1b8>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	82bb      	strh	r3, [r7, #20]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	75bb      	strb	r3, [r7, #22]
    uint8_t dataRx[3]                       = { 0 };
 8000a32:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <readData+0x1b8>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	823b      	strh	r3, [r7, #16]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	74bb      	strb	r3, [r7, #18]
    uint8_t bytesPerWord                    = getWordByteLength();
 8000a3c:	f000 fa94 	bl	8000f68 <getWordByteLength>
 8000a40:	4603      	mov	r3, r0
 8000a42:	76fb      	strb	r3, [r7, #27]

    // (OPTIONAL) Ignore CRC error checking
    uint8_t crcWord = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	76bb      	strb	r3, [r7, #26]
    uint16_t crcWordIn = calculateCRC(&DataTx[0], bytesPerWord * 2, 0xFFFF);
    crcTx[0] = upperByte(crcWordIn);
    crcTx[1] = lowerByte(crcWordIn);
#endif

    uint8_t dataTx[3] = { 0x00, 0,0 };      // 1 word, up to 4 bytes long = 4 bytes maximum
 8000a48:	4a64      	ldr	r2, [pc, #400]	; (8000bdc <readData+0x1bc>)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	4611      	mov	r1, r2
 8000a52:	8019      	strh	r1, [r3, #0]
 8000a54:	3302      	adds	r3, #2
 8000a56:	0c12      	lsrs	r2, r2, #16
 8000a58:	701a      	strb	r2, [r3, #0]
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_RESET){
 8000a5a:	bf00      	nop
 8000a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a60:	485f      	ldr	r0, [pc, #380]	; (8000be0 <readData+0x1c0>)
 8000a62:	f001 faab 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f7      	bne.n	8000a5c <readData+0x3c>
       }
    // Set the nCS pin LOW
    setCS(LOW);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fa8b 	bl	8000f88 <setCS>

    HAL_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f001 f814 	bl	8001aa0 <HAL_Delay>
    // Send NULL word, receive response word

        //dataRx[i] = spiSendReceiveByte(0x00);
        HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE,(uint8_t*) dataTx,(uint8_t*)dataRx, 3, 100);
 8000a78:	f107 0210 	add.w	r2, r7, #16
 8000a7c:	f107 010c 	add.w	r1, r7, #12
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2303      	movs	r3, #3
 8000a86:	4857      	ldr	r0, [pc, #348]	; (8000be4 <readData+0x1c4>)
 8000a88:	f001 ffeb 	bl	8002a62 <HAL_SPI_TransmitReceive>

    DataStruct->response = combineBytes(dataRx[0], dataRx[1]);
 8000a8c:	7c3b      	ldrb	r3, [r7, #16]
 8000a8e:	7c7a      	ldrb	r2, [r7, #17]
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f9bc 	bl	8000e10 <combineBytes>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	801a      	strh	r2, [r3, #0]
    //uint16_t crcWord = calculateCRC(&dataRx[0], bytesPerWord, 0xFFFF);

    // Send 2nd word, receive channel 1 data

        //dataRx[i] = spiSendReceiveByte(crcTx[i]);
        HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*)crcTx,(uint8_t*) dataRx, 3, 100);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0114 	add.w	r1, r7, #20
 8000aa8:	2364      	movs	r3, #100	; 0x64
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2303      	movs	r3, #3
 8000aae:	484d      	ldr	r0, [pc, #308]	; (8000be4 <readData+0x1c4>)
 8000ab0:	f001 ffd7 	bl	8002a62 <HAL_SPI_TransmitReceive>


    DataStruct->channel0 = signExtend(&dataRx[0]);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f9c0 	bl	8000e3e <signExtend>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	605a      	str	r2, [r3, #4]
#if (CHANNEL_COUNT > 1)

    // Send 3rd word, receive channel 2 data

       // dataRx[i] = spiSendReceiveByte(0x00);
        HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, (uint8_t*) 0x00, (uint8_t*)dataRx, bytesPerWord, 100);
 8000ac4:	7efb      	ldrb	r3, [r7, #27]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	f107 0210 	add.w	r2, r7, #16
 8000acc:	2164      	movs	r1, #100	; 0x64
 8000ace:	9100      	str	r1, [sp, #0]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4844      	ldr	r0, [pc, #272]	; (8000be4 <readData+0x1c4>)
 8000ad4:	f001 ffc5 	bl	8002a62 <HAL_SPI_TransmitReceive>


    DataStruct->channel1 = signExtend(&dataRx[0]);
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f9ae 	bl	8000e3e <signExtend>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	609a      	str	r2, [r3, #8]

#endif
#if (CHANNEL_COUNT > 2)

    // Send 4th word, receive channel 3 data
    for (i = 0; i < bytesPerWord; i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	e00f      	b.n	8000b0e <readData+0xee>
    {
       // dataRx[i] = spiSendReceiveByte(0x00);
        HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, 0x00, dataRx[i], 1, 100);
 8000aee:	f107 0210 	add.w	r2, r7, #16
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	2364      	movs	r3, #100	; 0x64
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	2100      	movs	r1, #0
 8000b02:	4838      	ldr	r0, [pc, #224]	; (8000be4 <readData+0x1c4>)
 8000b04:	f001 ffad 	bl	8002a62 <HAL_SPI_TransmitReceive>
    for (i = 0; i < bytesPerWord; i++)
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	7efb      	ldrb	r3, [r7, #27]
 8000b10:	69fa      	ldr	r2, [r7, #28]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbeb      	blt.n	8000aee <readData+0xce>

    }
    DataStruct->channel2 = signExtend(&dataRx[0]);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f98f 	bl	8000e3e <signExtend>
 8000b20:	4602      	mov	r2, r0
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60da      	str	r2, [r3, #12]

#endif
#if (CHANNEL_COUNT > 3)

    // Send 5th word, receive channel 4 data
    for (i = 0; i < bytesPerWord; i++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	e00f      	b.n	8000b4c <readData+0x12c>
    {
        //dataRx[i] = spiSendReceiveByte(0x00);
    	HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, 0x00, dataRx[i], 1, 100);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	2364      	movs	r3, #100	; 0x64
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4828      	ldr	r0, [pc, #160]	; (8000be4 <readData+0x1c4>)
 8000b42:	f001 ff8e 	bl	8002a62 <HAL_SPI_TransmitReceive>
    for (i = 0; i < bytesPerWord; i++)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	7efb      	ldrb	r3, [r7, #27]
 8000b4e:	69fa      	ldr	r2, [r7, #28]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbeb      	blt.n	8000b2c <readData+0x10c>

    }
    DataStruct->channel3 = signExtend(&dataRx[0]);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f970 	bl	8000e3e <signExtend>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	611a      	str	r2, [r3, #16]
    //crcWord = calculateCRC(&dataRx[0], bytesPerWord, crcWord);

#endif

    // Send the next word, receive CRC data
    for (i = 0; i < bytesPerWord; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	e00f      	b.n	8000b8a <readData+0x16a>
    {
       // dataRx[i] = spiSendReceiveByte(0x00);
        HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, 0x00, dataRx[i], 1, 100);
 8000b6a:	f107 0210 	add.w	r2, r7, #16
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4819      	ldr	r0, [pc, #100]	; (8000be4 <readData+0x1c4>)
 8000b80:	f001 ff6f 	bl	8002a62 <HAL_SPI_TransmitReceive>
    for (i = 0; i < bytesPerWord; i++)
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	3301      	adds	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
 8000b8a:	7efb      	ldrb	r3, [r7, #27]
 8000b8c:	69fa      	ldr	r2, [r7, #28]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	dbeb      	blt.n	8000b6a <readData+0x14a>

    }
    DataStruct->crc = combineBytes(dataRx[0], dataRx[1]);
 8000b92:	7c3b      	ldrb	r3, [r7, #16]
 8000b94:	7c7a      	ldrb	r2, [r7, #17]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f939 	bl	8000e10 <combineBytes>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	805a      	strh	r2, [r3, #2]
     //NOTE: If we continue calculating the CRC with a matching CRC, the result should be zero.
    // * Any non-zero result will indicate a mismatch.

    //crcWord = calculateCRC(&dataRx[0], bytesPerWord, crcWord);

    HAL_Delay(1);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f000 ff7a 	bl	8001aa0 <HAL_Delay>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) != GPIO_PIN_SET){
 8000bac:	bf00      	nop
 8000bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <readData+0x1c0>)
 8000bb4:	f001 fa02 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d1f7      	bne.n	8000bae <readData+0x18e>

      }
      setCS(HIGH);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f000 f9e2 	bl	8000f88 <setCS>

    // Returns true when a CRC error occurs
    return ((bool) crcWord);
 8000bc4:	7ebb      	ldrb	r3, [r7, #26]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	bf14      	ite	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	2300      	moveq	r3, #0
 8000bce:	b2db      	uxtb	r3, r3
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	080051a4 	.word	0x080051a4
 8000bdc:	080051a8 	.word	0x080051a8
 8000be0:	40020000 	.word	0x40020000
 8000be4:	20000084 	.word	0x20000084

08000be8 <sendCommand>:
//!
//! \return ADC response byte (typically the STATUS byte).
//
//*****************************************************************************
uint16_t sendCommand(uint16_t opcode)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
    // Assert if this function is used to send any of the following opcodes
    assert(OPCODE_RREG != opcode);      // Use "readSingleRegister()"
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000bf8:	d106      	bne.n	8000c08 <sendCommand+0x20>
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <sendCommand+0xf4>)
 8000bfc:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <sendCommand+0xf8>)
 8000bfe:	f240 210a 	movw	r1, #522	; 0x20a
 8000c02:	4838      	ldr	r0, [pc, #224]	; (8000ce4 <sendCommand+0xfc>)
 8000c04:	f003 faf8 	bl	80041f8 <__assert_func>
    assert(OPCODE_WREG != opcode);      // Use "writeSingleRegister()"
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000c0e:	d106      	bne.n	8000c1e <sendCommand+0x36>
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <sendCommand+0x100>)
 8000c12:	4a33      	ldr	r2, [pc, #204]	; (8000ce0 <sendCommand+0xf8>)
 8000c14:	f240 210b 	movw	r1, #523	; 0x20b
 8000c18:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <sendCommand+0xfc>)
 8000c1a:	f003 faed 	bl	80041f8 <__assert_func>
    assert(OPCODE_LOCK != opcode);      // Use "lockRegisters()"
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	f240 5255 	movw	r2, #1365	; 0x555
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d106      	bne.n	8000c36 <sendCommand+0x4e>
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <sendCommand+0x104>)
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <sendCommand+0xf8>)
 8000c2c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8000c30:	482c      	ldr	r0, [pc, #176]	; (8000ce4 <sendCommand+0xfc>)
 8000c32:	f003 fae1 	bl	80041f8 <__assert_func>
    assert(OPCODE_UNLOCK != opcode);    // Use "unlockRegisters()"
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	f240 6255 	movw	r2, #1621	; 0x655
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d106      	bne.n	8000c4e <sendCommand+0x66>
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <sendCommand+0x108>)
 8000c42:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <sendCommand+0xf8>)
 8000c44:	f240 210d 	movw	r1, #525	; 0x20d
 8000c48:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <sendCommand+0xfc>)
 8000c4a:	f003 fad5 	bl	80041f8 <__assert_func>
    assert(OPCODE_RESET != opcode);    //  Use "resetDevice()"
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	2b11      	cmp	r3, #17
 8000c52:	d106      	bne.n	8000c62 <sendCommand+0x7a>
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <sendCommand+0x10c>)
 8000c56:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <sendCommand+0xf8>)
 8000c58:	f240 210e 	movw	r1, #526	; 0x20e
 8000c5c:	4821      	ldr	r0, [pc, #132]	; (8000ce4 <sendCommand+0xfc>)
 8000c5e:	f003 facb 	bl	80041f8 <__assert_func>
    // Build TX and RX byte array
#ifdef ENABLE_CRC_IN
    uint8_t dataTx[8] = { 0 };      // 2 words, up to 4 bytes each = 8 bytes maximum
    uint8_t dataRx[8] = { 0 };
#else
    uint8_t dataTx[4] = { 0 };      // 1 word, up to 4 bytes long = 4 bytes maximum
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
    uint8_t dataRx[4] = { 0 };
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
#endif
    uint8_t numberOfBytes = buildSPIarray(&opcode, 1, dataTx);
 8000c6a:	f107 020c 	add.w	r2, r7, #12
 8000c6e:	1dbb      	adds	r3, r7, #6
 8000c70:	2101      	movs	r1, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f906 	bl	8000e84 <buildSPIarray>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	74fb      	strb	r3, [r7, #19]

     //Set the nCS pin LOW
    setCS(LOW);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 f983 	bl	8000f88 <setCS>

    // Send the opcode (and crc word, if enabled)
    int i;

    for (i = 0; i < numberOfBytes; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e014      	b.n	8000cb2 <sendCommand+0xca>
    {
       //dataRx[i] = spiSendReceiveByte(dataTx[i]);
       HAL_SPI_TransmitReceive(&ADS131M04_SPI_HANDLE, dataTx[i], dataRx[i], 1, 100);
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	4413      	add	r3, r2
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4619      	mov	r1, r3
 8000c94:	f107 0208 	add.w	r2, r7, #8
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2364      	movs	r3, #100	; 0x64
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <sendCommand+0x110>)
 8000ca8:	f001 fedb 	bl	8002a62 <HAL_SPI_TransmitReceive>
    for (i = 0; i < numberOfBytes; i++)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	7cfb      	ldrb	r3, [r7, #19]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbe6      	blt.n	8000c88 <sendCommand+0xa0>
    }


     //Set the nCS pin HIGH
    setCS(HIGH);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 f964 	bl	8000f88 <setCS>

    // Combine response bytes and return as a 16-bit word
    uint16_t adcResponse = combineBytes(dataRx[0], dataRx[1]);
 8000cc0:	7a3b      	ldrb	r3, [r7, #8]
 8000cc2:	7a7a      	ldrb	r2, [r7, #9]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f8a2 	bl	8000e10 <combineBytes>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	823b      	strh	r3, [r7, #16]
    return adcResponse;
 8000cd0:	8a3b      	ldrh	r3, [r7, #16]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	080051ac 	.word	0x080051ac
 8000ce0:	08005294 	.word	0x08005294
 8000ce4:	0800518c 	.word	0x0800518c
 8000ce8:	080051c4 	.word	0x080051c4
 8000cec:	080051dc 	.word	0x080051dc
 8000cf0:	080051f4 	.word	0x080051f4
 8000cf4:	0800520c 	.word	0x0800520c
 8000cf8:	20000084 	.word	0x20000084

08000cfc <restoreRegisterDefaults>:
//!
//! \return None.
//
//*****************************************************************************
void restoreRegisterDefaults(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
    registerMap[ID_ADDRESS]             =   0x00;             //   NOTE: This a read-only register
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	801a      	strh	r2, [r3, #0]
    registerMap[STATUS_ADDRESS]         =   STATUS_DEFAULT;
 8000d06:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d08:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000d0c:	805a      	strh	r2, [r3, #2]
    registerMap[MODE_ADDRESS]           =   MODE_DEFAULT;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d10:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8000d14:	809a      	strh	r2, [r3, #4]
    registerMap[CLOCK_ADDRESS]          =   CLOCK_DEFAULT;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d18:	f640 720e 	movw	r2, #3854	; 0xf0e
 8000d1c:	80da      	strh	r2, [r3, #6]
    registerMap[GAIN1_ADDRESS]          =   GAIN1_DEFAULT;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	811a      	strh	r2, [r3, #8]
    registerMap[GAIN2_ADDRESS]          =   GAIN2_DEFAULT;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	815a      	strh	r2, [r3, #10]
    registerMap[CFG_ADDRESS]            =   CFG_DEFAULT;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d2c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000d30:	819a      	strh	r2, [r3, #12]
    registerMap[THRSHLD_MSB_ADDRESS]    =   THRSHLD_MSB_DEFAULT;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	81da      	strh	r2, [r3, #14]
    registerMap[THRSHLD_LSB_ADDRESS]    =   THRSHLD_LSB_DEFAULT;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	821a      	strh	r2, [r3, #16]
    registerMap[CH0_CFG_ADDRESS]        =   CH0_CFG_DEFAULT;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	825a      	strh	r2, [r3, #18]
    registerMap[CH0_OCAL_MSB_ADDRESS]   =   CH0_OCAL_MSB_DEFAULT;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	829a      	strh	r2, [r3, #20]
    registerMap[CH0_OCAL_LSB_ADDRESS]   =   CH0_OCAL_LSB_DEFAULT;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	82da      	strh	r2, [r3, #22]
    registerMap[CH0_GCAL_MSB_ADDRESS]   =   CH0_GCAL_MSB_DEFAULT;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d56:	831a      	strh	r2, [r3, #24]
    registerMap[CH0_GCAL_LSB_ADDRESS]   =   CH0_GCAL_LSB_DEFAULT;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	835a      	strh	r2, [r3, #26]
#if (CHANNEL_COUNT > 1)
    registerMap[CH1_CFG_ADDRESS]        =   CH1_CFG_DEFAULT;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	839a      	strh	r2, [r3, #28]
    registerMap[CH1_OCAL_MSB_ADDRESS]   =   CH1_OCAL_MSB_DEFAULT;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	83da      	strh	r2, [r3, #30]
    registerMap[CH1_OCAL_LSB_ADDRESS]   =   CH1_OCAL_LSB_DEFAULT;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	841a      	strh	r2, [r3, #32]
    registerMap[CH1_GCAL_MSB_ADDRESS]   =   CH1_GCAL_MSB_DEFAULT;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d76:	845a      	strh	r2, [r3, #34]	; 0x22
    registerMap[CH1_GCAL_LSB_ADDRESS]   =   CH1_GCAL_LSB_DEFAULT;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
#if (CHANNEL_COUNT > 2)
    registerMap[CH2_CFG_ADDRESS]        =   CH2_CFG_DEFAULT;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	84da      	strh	r2, [r3, #38]	; 0x26
    registerMap[CH2_OCAL_MSB_ADDRESS]   =   CH2_OCAL_MSB_DEFAULT;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	851a      	strh	r2, [r3, #40]	; 0x28
    registerMap[CH2_OCAL_LSB_ADDRESS]   =   CH2_OCAL_LSB_DEFAULT;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    registerMap[CH2_GCAL_MSB_ADDRESS]   =   CH2_GCAL_MSB_DEFAULT;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d96:	859a      	strh	r2, [r3, #44]	; 0x2c
    registerMap[CH2_GCAL_LSB_ADDRESS]   =   CH2_GCAL_LSB_DEFAULT;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
#endif
#if (CHANNEL_COUNT > 3)
    registerMap[CH3_CFG_ADDRESS]        =   CH3_CFG_DEFAULT;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	861a      	strh	r2, [r3, #48]	; 0x30
    registerMap[CH3_OCAL_MSB_ADDRESS]   =   CH3_OCAL_MSB_DEFAULT;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	865a      	strh	r2, [r3, #50]	; 0x32
    registerMap[CH3_OCAL_LSB_ADDRESS]   =   CH3_OCAL_LSB_DEFAULT;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	869a      	strh	r2, [r3, #52]	; 0x34
    registerMap[CH3_GCAL_MSB_ADDRESS]   =   CH3_GCAL_MSB_DEFAULT;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000db2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000db6:	86da      	strh	r2, [r3, #54]	; 0x36
    registerMap[CH3_GCAL_LSB_ADDRESS]   =   CH3_GCAL_LSB_DEFAULT;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	871a      	strh	r2, [r3, #56]	; 0x38
    registerMap[CH7_OCAL_MSB_ADDRESS]   =   CH7_OCAL_MSB_DEFAULT;
    registerMap[CH7_OCAL_LSB_ADDRESS]   =   CH7_OCAL_LSB_DEFAULT;
    registerMap[CH7_GCAL_MSB_ADDRESS]   =   CH7_GCAL_MSB_DEFAULT;
    registerMap[CH7_GCAL_LSB_ADDRESS]   =   CH7_GCAL_LSB_DEFAULT;
#endif
    registerMap[REGMAP_CRC_ADDRESS]     =   REGMAP_CRC_DEFAULT;
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <restoreRegisterDefaults+0xd4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200000dc 	.word	0x200000dc

08000dd4 <upperByte>:
//!
//! \return 8-bit most-significant byte.
//
//*****************************************************************************
uint8_t upperByte(uint16_t uint16_Word)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
    uint8_t msByte;
    msByte = (uint8_t) ((uint16_Word >> 8) & 0x00FF);
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	73fb      	strb	r3, [r7, #15]

    return msByte;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <lowerByte>:
//!
//! \return 8-bit least-significant byte.
//
//*****************************************************************************
uint8_t lowerByte(uint16_t uint16_Word)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
    uint8_t lsByte;
    lsByte = (uint8_t) (uint16_Word & 0x00FF);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	73fb      	strb	r3, [r7, #15]

    return lsByte;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <combineBytes>:
//!
//! \return concatenated 16-bit word.
//
//*****************************************************************************
uint16_t combineBytes(uint8_t upperByte, uint8_t lowerByte)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
    uint16_t combinedValue;
    combinedValue = ((uint16_t) upperByte << 8) | ((uint16_t) lowerByte);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	81fb      	strh	r3, [r7, #14]

    return combinedValue;
 8000e30:	89fb      	ldrh	r3, [r7, #14]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <signExtend>:
//!
//! \return Returns the signed-extend 32-bit result.
//
//*****************************************************************************
int32_t signExtend(const uint8_t dataBytes[])
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b087      	sub	sp, #28
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]

#ifdef WORD_LENGTH_24BIT

    int32_t upperByte   = ((int32_t) dataBytes[0] << 24);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	061b      	lsls	r3, r3, #24
 8000e4c:	617b      	str	r3, [r7, #20]
    int32_t middleByte  = ((int32_t) dataBytes[1] << 16);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	613b      	str	r3, [r7, #16]
    int32_t lowerByte   = ((int32_t) dataBytes[2] << 8);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	60fb      	str	r3, [r7, #12]

    int32_t result = (upperByte | middleByte | lowerByte);
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60bb      	str	r3, [r7, #8]
    return (((int32_t) (upperByte | middleByte | lowerByte)));// >> 8);     // Right-shift of signed data maintains signed bit
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
    int32_t lowerByte   = ((int32_t) dataBytes[1] << 16);

    return (((int32_t) (upperByte | lowerByte)) >> 16);                 // Right-shift of signed data maintains signed bit

#endif
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <buildSPIarray>:
//!
//! \return number of bytes added to byteArray[].
//
//*****************************************************************************
uint8_t buildSPIarray(const uint16_t opcodeArray[], uint8_t numberOpcodes, uint8_t byteArray[])
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	72fb      	strb	r3, [r7, #11]

    // * Frame size = opcode word(s) + optional CRC word
   //  * Number of bytes per word = 2, 3, or 4
     //* Total bytes = bytes per word * number of words

    uint8_t numberWords     = numberOpcodes + (SPI_CRC_ENABLED ? 1 : 0);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff fba8 	bl	80005e8 <getRegisterValue>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf14      	ite	ne
 8000ea2:	2301      	movne	r3, #1
 8000ea4:	2300      	moveq	r3, #0
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	4413      	add	r3, r2
 8000eae:	74fb      	strb	r3, [r7, #19]
    uint8_t bytesPerWord    = getWordByteLength();
 8000eb0:	f000 f85a 	bl	8000f68 <getWordByteLength>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	74bb      	strb	r3, [r7, #18]
    uint8_t numberOfBytes   = numberWords * bytesPerWord;
 8000eb8:	7cfa      	ldrb	r2, [r7, #19]
 8000eba:	7cbb      	ldrb	r3, [r7, #18]
 8000ebc:	fb12 f303 	smulbb	r3, r2, r3
 8000ec0:	747b      	strb	r3, [r7, #17]

    int i;
    for (i = 0; i < numberOpcodes; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e024      	b.n	8000f12 <buildSPIarray+0x8e>
    {
        // NOTE: Be careful not to accidentally overflow the array here.
        // The array and opcodes are defined in the calling function, so
        // we are trusting that no mistakes were made in the calling function!
        byteArray[(i*bytesPerWord) + 0] = upperByte(opcodeArray[i]);
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	8819      	ldrh	r1, [r3, #0]
 8000ed2:	7cbb      	ldrb	r3, [r7, #18]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	189c      	adds	r4, r3, r2
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	f7ff ff77 	bl	8000dd4 <upperByte>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	7023      	strb	r3, [r4, #0]
        byteArray[(i*bytesPerWord) + 1] = lowerByte(opcodeArray[i]);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	8819      	ldrh	r1, [r3, #0]
 8000ef4:	7cbb      	ldrb	r3, [r7, #18]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	18d4      	adds	r4, r2, r3
 8000f02:	4608      	mov	r0, r1
 8000f04:	f7ff ff76 	bl	8000df4 <lowerByte>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < numberOpcodes; i++)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	7afb      	ldrb	r3, [r7, #11]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbd6      	blt.n	8000ec8 <buildSPIarray+0x44>
    uint16_t crcWord = calculateCRC(&byteArray[0], numberOfBytes, 0xFFFF);
    byteArray[(i*bytesPerWord) + 0] = upperByte(crcWord);
    byteArray[(i*bytesPerWord) + 1] = lowerByte(crcWord);
#endif

    return numberOfBytes;
 8000f1a:	7c7b      	ldrb	r3, [r7, #17]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <enforce_selected_device_modes>:
//!
//! \return uint16_t modified register data.
//
//*****************************************************************************
uint16_t enforce_selected_device_modes(uint16_t data)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
#ifdef ENABLE_CRC_IN
    // When writing to the MODE register, ensure RX_CRC_EN bit is ALWAYS set
    data |= MODE_RX_CRC_EN_ENABLED;
#else
    // When writing to the MODE register, ensure RX_CRC_EN bit is NEVER set
    data &= ~MODE_RX_CRC_EN_ENABLED;
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f34:	80fb      	strh	r3, [r7, #6]
    ///////////////////////////////////////////////////////////////////////////
    // Enforce WLENGH setting

#ifdef WORD_LENGTH_24BIT
    // When writing to the MODE register, ensure WLENGTH bits are ALWAYS set to 01b
    data = (data & ~MODE_WLENGTH_MASK) | MODE_WLENGTH_24BIT;
 8000f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	80fb      	strh	r3, [r7, #6]
    ///////////////////////////////////////////////////////////////////////////
    // Enforce DRDY_FMT setting

#ifdef DRDY_FMT_PULSE
    // When writing to the MODE register, ensure DRDY_FMT bit is ALWAYS set
    data = (data & ~MODE_DRDY_FMT_MASK) | MODE_DRDY_FMT_NEG_PULSE_FIXED_WIDTH;
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	80fb      	strh	r3, [r7, #6]
    ///////////////////////////////////////////////////////////////////////////
    // Enforce CRC_TYPE setting

#ifdef CRC_CCITT
    // When writing to the MODE register, ensure CRC_TYPE bit is NEVER set
    data = (data & ~STATUS_CRC_TYPE_MASK) | STATUS_CRC_TYPE_16BIT_CCITT;
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f56:	80fb      	strh	r3, [r7, #6]
    // When writing to the MODE register, ensure CRC_TYPE bit is ALWAYS set
    data = (data & ~STATUS_CRC_TYPE_MASK) | STATUS_CRC_TYPE_16BIT_ANSI;
#endif

    // Return modified register data
    return data;
 8000f58:	88fb      	ldrh	r3, [r7, #6]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <getWordByteLength>:
//!
//! \return SPI word byte length (2, 3, or 4)
//
//*****************************************************************************
uint8_t getWordByteLength(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    return wlength_byte_values[WLENGTH];
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f7ff fb3b 	bl	80005e8 <getRegisterValue>
 8000f72:	4603      	mov	r3, r0
 8000f74:	121b      	asrs	r3, r3, #8
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	4a01      	ldr	r2, [pc, #4]	; (8000f84 <getWordByteLength+0x1c>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08005254 	.word	0x08005254

08000f88 <setCS>:
//!
//! \return None.
//
//*****************************************************************************
void setCS(const bool state)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    /* --- INSERT YOUR CODE HERE --- */



    uint8_t value = (uint8_t) (state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <setCS+0x14>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <setCS+0x16>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(nCS_PORT, nCS_PIN, value);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <setCS+0x30>)
 8000faa:	f001 f81f 	bl	8001fec <HAL_GPIO_WritePin>


}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020000 	.word	0x40020000

08000fbc <setSYNC_RESET>:
//!
//! \return None.
//
//*****************************************************************************
void setSYNC_RESET(const bool state)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    /* --- INSERT YOUR CODE HERE --- */
    uint8_t value = (uint8_t) (state ? GPIO_PIN_RESET:  GPIO_PIN_SET);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f083 0301 	eor.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(nSYNC_nRESET_PORT, nSYNC_nRESET_PIN, value);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <setSYNC_RESET+0x28>)
 8000fd8:	f001 f808 	bl	8001fec <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <toggleRESET>:
//!
//! \return None.
//
//*****************************************************************************
void toggleRESET(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    /* --- INSERT YOUR CODE HERE --- */
	HAL_GPIO_WritePin(nSYNC_nRESET_PORT, nSYNC_nRESET_PIN, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2101      	movs	r1, #1
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <toggleRESET+0x38>)
 8000ff2:	f000 fffb 	bl	8001fec <HAL_GPIO_WritePin>

    // Minimum /RESET pulse width (tSRLRST) equals 2,048 CLKIN periods (1 ms @ 2.048 MHz)
   HAL_Delay(2);
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f000 fd52 	bl	8001aa0 <HAL_Delay>

    HAL_GPIO_WritePin(nSYNC_nRESET_PORT, nSYNC_nRESET_PIN, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <toggleRESET+0x38>)
 8001002:	f000 fff3 	bl	8001fec <HAL_GPIO_WritePin>

    // tREGACQ delay before communicating with the device again
    HAL_Delay(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 fd4a 	bl	8001aa0 <HAL_Delay>

    // NOTE: The ADS131M0x's next response word should be (0xFF20 | CHANCNT).
    // A different response may be an indication that the device did not reset.

    // Update register array
    restoreRegisterDefaults();
 800100c:	f7ff fe76 	bl	8000cfc <restoreRegisterDefaults>

    // Write to MODE register to enforce mode settings
    writeSingleRegister(MODE_ADDRESS, MODE_DEFAULT);
 8001010:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff fc23 	bl	8000860 <writeSingleRegister>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020800 	.word	0x40020800

08001024 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800102c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001030:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d013      	beq.n	8001064 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800103c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001040:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001044:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00b      	beq.n	8001064 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800104c:	e000      	b.n	8001050 <ITM_SendChar+0x2c>
    {
      __NOP();
 800104e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001050:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f9      	beq.n	800104e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800105a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t RREG[3] ={0b10100000};
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <main+0xcc>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	833b      	strh	r3, [r7, #24]
 8001080:	2300      	movs	r3, #0
 8001082:	76bb      	strb	r3, [r7, #26]
	uint8_t NLL[3] = {0};
 8001084:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <main+0xd0>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	82bb      	strh	r3, [r7, #20]
 800108a:	2300      	movs	r3, #0
 800108c:	75bb      	strb	r3, [r7, #22]
	uint8_t rxData[18] ={0};
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	819a      	strh	r2, [r3, #12]


	uint16_t STATUS_REG = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 fc8b 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f85f 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 f991 	bl	80013d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ae:	f000 f965 	bl	800137c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010b2:	f000 f8c3 	bl	800123c <MX_TIM1_Init>
  MX_SPI3_Init();
 80010b6:	f7ff fa61 	bl	800057c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOC, SYNC_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2101      	movs	r1, #1
 80010be:	4822      	ldr	r0, [pc, #136]	; (8001148 <main+0xd4>)
 80010c0:	f000 ff94 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	4820      	ldr	r0, [pc, #128]	; (800114c <main+0xd8>)
 80010cc:	f000 ff8e 	bl	8001fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRDY_GPIO_Port, DRDY_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d6:	481d      	ldr	r0, [pc, #116]	; (800114c <main+0xd8>)
 80010d8:	f000 ff88 	bl	8001fec <HAL_GPIO_WritePin>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010dc:	2100      	movs	r1, #0
 80010de:	481c      	ldr	r0, [pc, #112]	; (8001150 <main+0xdc>)
 80010e0:	f001 fff4 	bl	80030cc <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 5;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <main+0xe0>)
 80010e6:	2205      	movs	r2, #5
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_GPIO_WritePin(GPIOC, SYNC_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <main+0xd4>)
 80010f0:	f000 ff7c 	bl	8001fec <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 fcd3 	bl	8001aa0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, SYNC_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2101      	movs	r1, #1
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <main+0xd4>)
 8001100:	f000 ff74 	bl	8001fec <HAL_GPIO_WritePin>

    adcStartup();
 8001104:	f7ff fa8e 	bl	8000624 <adcStartup>

	 writeSingleRegister(CLOCK_ADDRESS, 0x010E);
 8001108:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800110c:	2003      	movs	r0, #3
 800110e:	f7ff fba7 	bl	8000860 <writeSingleRegister>
	 ID_REG = readSingleRegister(CLOCK_ADDRESS);
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fa9c 	bl	8000650 <readSingleRegister>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <main+0xe4>)
 800111e:	801a      	strh	r2, [r3, #0]
	 printf("%d \n",ID_REG);
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <main+0xe4>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <main+0xe8>)
 8001128:	f003 f958 	bl	80043dc <iprintf>
	 	  // readSingleRegister(CLOCK_ADDRESS);

	 	 //ID_REG = readSingleRegister(STATUS_ADDRESS);
	 	 // printf("ID_REG2: %d \n",ID_REG);
	 	 //STATUS_REG = readSingleRegister(STATUS_ADDRESS);
	 		readData(&ADC_channel1);
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <main+0xec>)
 800112e:	f7ff fc77 	bl	8000a20 <readData>
	 		printf("Power: %d \n",ADC_channel1.channel0);
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <main+0xec>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4619      	mov	r1, r3
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <main+0xf0>)
 800113a:	f003 f94f 	bl	80043dc <iprintf>
	 		readData(&ADC_channel1);
 800113e:	e7f5      	b.n	800112c <main+0xb8>
 8001140:	0800524c 	.word	0x0800524c
 8001144:	08005250 	.word	0x08005250
 8001148:	40020800 	.word	0x40020800
 800114c:	40020000 	.word	0x40020000
 8001150:	2000015c 	.word	0x2000015c
 8001154:	40010000 	.word	0x40010000
 8001158:	20000200 	.word	0x20000200
 800115c:	08005238 	.word	0x08005238
 8001160:	200001ec 	.word	0x200001ec
 8001164:	08005240 	.word	0x08005240

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	; 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f003 f985 	bl	8004486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <SystemClock_Config+0xcc>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <SystemClock_Config+0xd0>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d8:	2310      	movs	r3, #16
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011e6:	2304      	movs	r3, #4
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ff16 	bl	8002020 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011fa:	f000 f995 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 f978 	bl	8002510 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001226:	f000 f97f 	bl	8001528 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	; 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b096      	sub	sp, #88	; 0x58
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f003 f906 	bl	8004486 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <MX_TIM1_Init+0x138>)
 800127c:	4a3e      	ldr	r2, [pc, #248]	; (8001378 <MX_TIM1_Init+0x13c>)
 800127e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001280:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_TIM1_Init+0x138>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <MX_TIM1_Init+0x138>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11;
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <MX_TIM1_Init+0x138>)
 800128e:	220b      	movs	r2, #11
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <MX_TIM1_Init+0x138>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <MX_TIM1_Init+0x138>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <MX_TIM1_Init+0x138>)
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a4:	4833      	ldr	r0, [pc, #204]	; (8001374 <MX_TIM1_Init+0x138>)
 80012a6:	f001 fe69 	bl	8002f7c <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012b0:	f000 f93a 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012be:	4619      	mov	r1, r3
 80012c0:	482c      	ldr	r0, [pc, #176]	; (8001374 <MX_TIM1_Init+0x138>)
 80012c2:	f002 f875 	bl	80033b0 <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012cc:	f000 f92c 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d0:	4828      	ldr	r0, [pc, #160]	; (8001374 <MX_TIM1_Init+0x138>)
 80012d2:	f001 fea2 	bl	800301a <HAL_TIM_PWM_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012dc:	f000 f924 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ec:	4619      	mov	r1, r3
 80012ee:	4821      	ldr	r0, [pc, #132]	; (8001374 <MX_TIM1_Init+0x138>)
 80012f0:	f002 fbfe 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80012fa:	f000 f915 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fe:	2360      	movs	r3, #96	; 0x60
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_TIM1_Init+0x138>)
 8001324:	f001 ff82 	bl	800322c <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800132e:	f000 f8fb 	bl	8001528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM1_Init+0x138>)
 8001356:	f002 fc39 	bl	8003bcc <HAL_TIMEx_ConfigBreakDeadTime>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001360:	f000 f8e2 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM1_Init+0x138>)
 8001366:	f000 f997 	bl	8001698 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3758      	adds	r7, #88	; 0x58
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000015c 	.word	0x2000015c
 8001378:	40010000 	.word	0x40010000

0800137c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_USART2_UART_Init+0x50>)
 8001384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f002 fc5c 	bl	8003c70 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013be:	f000 f8b3 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001a4 	.word	0x200001a4
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <MX_GPIO_Init+0x114>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a3d      	ldr	r2, [pc, #244]	; (80014e4 <MX_GPIO_Init+0x114>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <MX_GPIO_Init+0x114>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a36      	ldr	r2, [pc, #216]	; (80014e4 <MX_GPIO_Init+0x114>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <MX_GPIO_Init+0x114>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <MX_GPIO_Init+0x114>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYNC_GPIO_Port, SYNC_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2101      	movs	r1, #1
 800145a:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_GPIO_Init+0x118>)
 800145c:	f000 fdc6 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001466:	4821      	ldr	r0, [pc, #132]	; (80014ec <MX_GPIO_Init+0x11c>)
 8001468:	f000 fdc0 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001472:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4819      	ldr	r0, [pc, #100]	; (80014e8 <MX_GPIO_Init+0x118>)
 8001484:	f000 fc16 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYNC_Pin */
  GPIO_InitStruct.Pin = SYNC_Pin;
 8001488:	2301      	movs	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SYNC_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <MX_GPIO_Init+0x118>)
 80014a0:	f000 fc08 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_Pin;
 80014a4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <MX_GPIO_Init+0x11c>)
 80014be:	f000 fbf9 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_GPIO_Init+0x11c>)
 80014d8:	f000 fbec 	bl	8001cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020000 	.word	0x40020000

080014f0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e009      	b.n	8001516 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fd8a 	bl	8001024 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	dbf1      	blt.n	8001502 <_write+0x12>
  }
  return len;
 800151e:	687b      	ldr	r3, [r7, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001572:	2007      	movs	r0, #7
 8001574:	f000 fb6a 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a28      	ldr	r2, [pc, #160]	; (8001644 <HAL_SPI_MspInit+0xc0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d14a      	bne.n	800163c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a26      	ldr	r2, [pc, #152]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_SPI_MspInit+0xc4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800160c:	2306      	movs	r3, #6
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <HAL_SPI_MspInit+0xc8>)
 8001618:	f000 fb4c 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800161c:	2330      	movs	r3, #48	; 0x30
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800162c:	2306      	movs	r3, #6
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <HAL_SPI_MspInit+0xcc>)
 8001638:	f000 fb3c 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40003c00 	.word	0x40003c00
 8001648:	40023800 	.word	0x40023800
 800164c:	40020800 	.word	0x40020800
 8001650:	40020400 	.word	0x40020400

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_TIM_Base_MspInit+0x3c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d10d      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_TIM_Base_MspInit+0x40>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_TIM_Base_MspInit+0x40>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_TIM_Base_MspInit+0x40>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40010000 	.word	0x40010000
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <HAL_TIM_MspPostInit+0x68>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d11e      	bne.n	80016f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_TIM_MspPostInit+0x6c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_TIM_MspPostInit+0x6c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0x6c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_TIM_MspPostInit+0x70>)
 80016f4:	f000 fade 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40010000 	.word	0x40010000
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <HAL_UART_MspInit+0x84>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d12b      	bne.n	8001786 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_UART_MspInit+0x88>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_UART_MspInit+0x88>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_UART_MspInit+0x88>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_UART_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <HAL_UART_MspInit+0x88>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_UART_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001766:	230c      	movs	r3, #12
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001776:	2307      	movs	r3, #7
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_UART_MspInit+0x8c>)
 8001782:	f000 fa97 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40004400 	.word	0x40004400
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f93a 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180a:	f002 fe8b 	bl	8004524 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
  return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
  }

  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_close>:
  }
  return len;
}

int _close(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001896:	605a      	str	r2, [r3, #4]
  return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_isatty>:

int _isatty(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f002 fe0c 	bl	8004524 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20020000 	.word	0x20020000
 8001938:	00000400 	.word	0x00000400
 800193c:	20000204 	.word	0x20000204
 8001940:	20000358 	.word	0x20000358

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f002 fdcb 	bl	8004530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff fb6b 	bl	8001074 <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019ac:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 80019b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019b4:	20000358 	.word	0x20000358

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_Init+0x40>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_Init+0x40>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x40>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f931 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fda0 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f93b 	bl	8001c9a <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 f911 	bl	8001c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000208 	.word	0x20000208

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000208 	.word	0x20000208

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <__NVIC_SetPriorityGrouping>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_SetPriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff47 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff5c 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffb0 	bl	8001c08 <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e159      	b.n	8001f84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8148 	bne.w	8001f7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d005      	beq.n	8001d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d130      	bne.n	8001d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d017      	beq.n	8001da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a2 	beq.w	8001f7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e56:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_GPIO_Init+0x2ec>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x202>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_GPIO_Init+0x2f4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x1fe>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_GPIO_Init+0x2f8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x1fa>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a46      	ldr	r2, [pc, #280]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x1f6>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a45      	ldr	r2, [pc, #276]	; (8001fb4 <HAL_GPIO_Init+0x300>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x1f2>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e008      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e004      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f002 0203 	and.w	r2, r2, #3
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec8:	4935      	ldr	r1, [pc, #212]	; (8001fa0 <HAL_GPIO_Init+0x2ec>)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a2f      	ldr	r2, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a24      	ldr	r2, [pc, #144]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4e:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	f67f aea2 	bls.w	8001cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002008:	e003      	b.n	8002012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800200a:	887b      	ldrh	r3, [r7, #2]
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e267      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d075      	beq.n	800212a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00c      	beq.n	8002064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204a:	4b85      	ldr	r3, [pc, #532]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002052:	2b08      	cmp	r3, #8
 8002054:	d112      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4b82      	ldr	r3, [pc, #520]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002062:	d10b      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05b      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d157      	bne.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e242      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x74>
 8002086:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a75      	ldr	r2, [pc, #468]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e01d      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4b70      	ldr	r3, [pc, #448]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6f      	ldr	r2, [pc, #444]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6c      	ldr	r2, [pc, #432]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 80020b8:	4b69      	ldr	r3, [pc, #420]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a68      	ldr	r2, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b66      	ldr	r3, [pc, #408]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a65      	ldr	r2, [pc, #404]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fcd6 	bl	8001a88 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fcd2 	bl	8001a88 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e207      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fcc2 	bl	8001a88 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fcbe 	bl	8001a88 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1f3      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0xe8>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d063      	beq.n	80021fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214a:	2b08      	cmp	r3, #8
 800214c:	d11c      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e1c7      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4937      	ldr	r1, [pc, #220]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	e03a      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_RCC_OscConfig+0x244>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff fc77 	bl	8001a88 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff fc73 	bl	8001a88 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1a8      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4925      	ldr	r1, [pc, #148]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_OscConfig+0x244>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff fc56 	bl	8001a88 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e0:	f7ff fc52 	bl	8001a88 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e187      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d036      	beq.n	8002278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_RCC_OscConfig+0x248>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff fc36 	bl	8001a88 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fc32 	bl	8001a88 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e167      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x200>
 800223e:	e01b      	b.n	8002278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_OscConfig+0x248>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff fc1f 	bl	8001a88 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	e00e      	b.n	800226c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224e:	f7ff fc1b 	bl	8001a88 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d907      	bls.n	800226c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e150      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
 8002260:	40023800 	.word	0x40023800
 8002264:	42470000 	.word	0x42470000
 8002268:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ea      	bne.n	800224e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8097 	beq.w	80023b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a7c      	ldr	r2, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b77      	ldr	r3, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b74      	ldr	r3, [pc, #464]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a73      	ldr	r2, [pc, #460]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fbdb 	bl	8001a88 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7ff fbd7 	bl	8001a88 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e10c      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x2ea>
 80022fc:	4b64      	ldr	r3, [pc, #400]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	4a63      	ldr	r2, [pc, #396]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6713      	str	r3, [r2, #112]	; 0x70
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x324>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x30c>
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a5e      	ldr	r2, [pc, #376]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	4a5b      	ldr	r2, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6713      	str	r3, [r2, #112]	; 0x70
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0x324>
 800232c:	4b58      	ldr	r3, [pc, #352]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a57      	ldr	r2, [pc, #348]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	4b55      	ldr	r3, [pc, #340]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	4a54      	ldr	r2, [pc, #336]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800233e:	f023 0304 	bic.w	r3, r3, #4
 8002342:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d015      	beq.n	8002378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff fb9c 	bl	8001a88 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7ff fb98 	bl	8001a88 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0cb      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ee      	beq.n	8002354 <HAL_RCC_OscConfig+0x334>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff fb86 	bl	8001a88 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7ff fb82 	bl	8001a88 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0b5      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ee      	bne.n	8002380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	4a38      	ldr	r2, [pc, #224]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a1 	beq.w	8002500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d05c      	beq.n	8002484 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d141      	bne.n	8002456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_OscConfig+0x478>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fb56 	bl	8001a88 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff fb52 	bl	8001a88 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e087      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	491b      	ldr	r1, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x478>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff fb2b 	bl	8001a88 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fb27 	bl	8001a88 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e05c      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x416>
 8002454:	e054      	b.n	8002500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_OscConfig+0x478>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fb14 	bl	8001a88 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff fb10 	bl	8001a88 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e045      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x444>
 8002482:	e03d      	b.n	8002500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e038      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x4ec>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d028      	beq.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d121      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d11a      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0cc      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d90c      	bls.n	800254c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d044      	beq.n	8002630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d119      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e067      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4934      	ldr	r1, [pc, #208]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002600:	f7ff fa42 	bl	8001a88 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7ff fa3e 	bl	8001a88 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e04f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d20c      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f9a2 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	080052a0 	.word	0x080052a0
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e0:	b094      	sub	sp, #80	; 0x50
 80026e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	647b      	str	r3, [r7, #68]	; 0x44
 80026e8:	2300      	movs	r3, #0
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ec:	2300      	movs	r3, #0
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f4:	4b79      	ldr	r3, [pc, #484]	; (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d00d      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x40>
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 80e1 	bhi.w	80028c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 800270a:	2b04      	cmp	r3, #4
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x3a>
 800270e:	e0db      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002712:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002714:	e0db      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002716:	4b73      	ldr	r3, [pc, #460]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800271a:	e0d8      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4b6f      	ldr	r3, [pc, #444]	; (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002726:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
 800273c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
 800274a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800274e:	4622      	mov	r2, r4
 8002750:	462b      	mov	r3, r5
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	0159      	lsls	r1, r3, #5
 800275c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002760:	0150      	lsls	r0, r2, #5
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4621      	mov	r1, r4
 8002768:	1a51      	subs	r1, r2, r1
 800276a:	6139      	str	r1, [r7, #16]
 800276c:	4629      	mov	r1, r5
 800276e:	eb63 0301 	sbc.w	r3, r3, r1
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002780:	4659      	mov	r1, fp
 8002782:	018b      	lsls	r3, r1, #6
 8002784:	4651      	mov	r1, sl
 8002786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800278a:	4651      	mov	r1, sl
 800278c:	018a      	lsls	r2, r1, #6
 800278e:	4651      	mov	r1, sl
 8002790:	ebb2 0801 	subs.w	r8, r2, r1
 8002794:	4659      	mov	r1, fp
 8002796:	eb63 0901 	sbc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ae:	4690      	mov	r8, r2
 80027b0:	4699      	mov	r9, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb18 0303 	adds.w	r3, r8, r3
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	462b      	mov	r3, r5
 80027bc:	eb49 0303 	adc.w	r3, r9, r3
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ce:	4629      	mov	r1, r5
 80027d0:	024b      	lsls	r3, r1, #9
 80027d2:	4621      	mov	r1, r4
 80027d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d8:	4621      	mov	r1, r4
 80027da:	024a      	lsls	r2, r1, #9
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e2:	2200      	movs	r2, #0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ec:	f7fd fd48 	bl	8000280 <__aeabi_uldivmod>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4613      	mov	r3, r2
 80027f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f8:	e058      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	2200      	movs	r2, #0
 8002802:	4618      	mov	r0, r3
 8002804:	4611      	mov	r1, r2
 8002806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
 8002810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0159      	lsls	r1, r3, #5
 8002822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002826:	0150      	lsls	r0, r2, #5
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4641      	mov	r1, r8
 800282e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002832:	4649      	mov	r1, r9
 8002834:	eb63 0b01 	sbc.w	fp, r3, r1
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800284c:	ebb2 040a 	subs.w	r4, r2, sl
 8002850:	eb63 050b 	sbc.w	r5, r3, fp
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	00eb      	lsls	r3, r5, #3
 800285e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	18e3      	adds	r3, r4, r3
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	464b      	mov	r3, r9
 8002870:	eb45 0303 	adc.w	r3, r5, r3
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002882:	4629      	mov	r1, r5
 8002884:	028b      	lsls	r3, r1, #10
 8002886:	4621      	mov	r1, r4
 8002888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800288c:	4621      	mov	r1, r4
 800288e:	028a      	lsls	r2, r1, #10
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002896:	2200      	movs	r2, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	61fa      	str	r2, [r7, #28]
 800289c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a0:	f7fd fcee 	bl	8000280 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4613      	mov	r3, r2
 80028aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_GetSysClockFreq+0x200>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3750      	adds	r7, #80	; 0x50
 80028d4:	46bd      	mov	sp, r7
 80028d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	080052b0 	.word	0x080052b0

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800292c:	f7ff ffdc 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4903      	ldr	r1, [pc, #12]	; (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	080052b0 	.word	0x080052b0

08002950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07b      	b.n	8002a5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002972:	d009      	beq.n	8002988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
 800297a:	e005      	b.n	8002988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fdee 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	ea42 0103 	orr.w	r1, r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f003 0104 	and.w	r1, r3, #4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f003 0210 	and.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08c      	sub	sp, #48	; 0x30
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a70:	2301      	movs	r3, #1
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x26>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e198      	b.n	8002dba <HAL_SPI_TransmitReceive+0x358>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a90:	f7fe fffa 	bl	8001a88 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002aa6:	887b      	ldrh	r3, [r7, #2]
 8002aa8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_SPI_TransmitReceive+0x70>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab8:	d107      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x68>
 8002ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d003      	beq.n	8002ad2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ad0:	e16d      	b.n	8002dae <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_SPI_TransmitReceive+0x82>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_SPI_TransmitReceive+0x82>
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d103      	bne.n	8002aec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aea:	e160      	b.n	8002dae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d003      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2205      	movs	r2, #5
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d007      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	d17c      	bne.n	8002c58 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_SPI_TransmitReceive+0x10a>
 8002b66:	8b7b      	ldrh	r3, [r7, #26]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d16a      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	1c9a      	adds	r2, r3, #2
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b90:	e057      	b.n	8002c42 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_SPI_TransmitReceive+0x176>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x176>
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d113      	bne.n	8002bd8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	881a      	ldrh	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	1c9a      	adds	r2, r3, #2
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d119      	bne.n	8002c1a <HAL_SPI_TransmitReceive+0x1b8>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d014      	beq.n	8002c1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	1c9a      	adds	r2, r3, #2
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c16:	2301      	movs	r3, #1
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c1a:	f7fe ff35 	bl	8001a88 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d80b      	bhi.n	8002c42 <HAL_SPI_TransmitReceive+0x1e0>
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d007      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002c40:	e0b5      	b.n	8002dae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1a2      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x130>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d19d      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x130>
 8002c56:	e080      	b.n	8002d5a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0x204>
 8002c60:	8b7b      	ldrh	r3, [r7, #26]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d16f      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8c:	e05b      	b.n	8002d46 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d11c      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x274>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x274>
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d114      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	7812      	ldrb	r2, [r2, #0]
 8002cb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d119      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x2b6>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d014      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d18:	f7fe feb6 	bl	8001a88 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d803      	bhi.n	8002d30 <HAL_SPI_TransmitReceive+0x2ce>
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2e:	d102      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x2d4>
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002d44:	e033      	b.n	8002dae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d19e      	bne.n	8002c8e <HAL_SPI_TransmitReceive+0x22c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d199      	bne.n	8002c8e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8b8 	bl	8002ed4 <SPI_EndRxTxTransaction>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d76:	e01a      	b.n	8002dae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002da4:	e003      	b.n	8002dae <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3730      	adds	r7, #48	; 0x30
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dd4:	f7fe fe58 	bl	8001a88 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002de4:	f7fe fe50 	bl	8001a88 <HAL_GetTick>
 8002de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	015b      	lsls	r3, r3, #5
 8002df0:	0d1b      	lsrs	r3, r3, #20
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dfa:	e054      	b.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d050      	beq.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e04:	f7fe fe40 	bl	8001a88 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d902      	bls.n	8002e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13d      	bne.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e32:	d111      	bne.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3c:	d004      	beq.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d107      	bne.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d10f      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e017      	b.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d19b      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	2102      	movs	r1, #2
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff ff6a 	bl	8002dc4 <SPI_WaitFlagStateUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e032      	b.n	8002f6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <SPI_EndRxTxTransaction+0xa0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <SPI_EndRxTxTransaction+0xa4>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	0d5b      	lsrs	r3, r3, #21
 8002f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f24:	d112      	bne.n	8002f4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff ff47 	bl	8002dc4 <SPI_WaitFlagStateUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e00f      	b.n	8002f6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b80      	cmp	r3, #128	; 0x80
 8002f64:	d0f2      	beq.n	8002f4c <SPI_EndRxTxTransaction+0x78>
 8002f66:	e000      	b.n	8002f6a <SPI_EndRxTxTransaction+0x96>
        break;
 8002f68:	bf00      	nop
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000000 	.word	0x20000000
 8002f78:	165e9f81 	.word	0x165e9f81

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e041      	b.n	8003012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe fb56 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 fac0 	bl	8003540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e041      	b.n	80030b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f839 	bl	80030b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f000 fa71 	bl	8003540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x24>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e022      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d109      	bne.n	800310a <HAL_TIM_PWM_Start+0x3e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e015      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x58>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e068      	b.n	8003210 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0x82>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314c:	e013      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0x92>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800315c:	e00b      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	e003      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fc90 	bl	8003aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_TIM_PWM_Start+0x14c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d107      	bne.n	800319e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_TIM_PWM_Start+0x14c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d018      	beq.n	80031da <HAL_TIM_PWM_Start+0x10e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d013      	beq.n	80031da <HAL_TIM_PWM_Start+0x10e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a19      	ldr	r2, [pc, #100]	; (800321c <HAL_TIM_PWM_Start+0x150>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_TIM_PWM_Start+0x10e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a17      	ldr	r2, [pc, #92]	; (8003220 <HAL_TIM_PWM_Start+0x154>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_TIM_PWM_Start+0x10e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a16      	ldr	r2, [pc, #88]	; (8003224 <HAL_TIM_PWM_Start+0x158>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_TIM_PWM_Start+0x10e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <HAL_TIM_PWM_Start+0x15c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d111      	bne.n	80031fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d010      	beq.n	800320e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fc:	e007      	b.n	800320e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40010000 	.word	0x40010000
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	40014000 	.word	0x40014000

0800322c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003246:	2302      	movs	r3, #2
 8003248:	e0ae      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b0c      	cmp	r3, #12
 8003256:	f200 809f 	bhi.w	8003398 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003295 	.word	0x08003295
 8003264:	08003399 	.word	0x08003399
 8003268:	08003399 	.word	0x08003399
 800326c:	08003399 	.word	0x08003399
 8003270:	080032d5 	.word	0x080032d5
 8003274:	08003399 	.word	0x08003399
 8003278:	08003399 	.word	0x08003399
 800327c:	08003399 	.word	0x08003399
 8003280:	08003317 	.word	0x08003317
 8003284:	08003399 	.word	0x08003399
 8003288:	08003399 	.word	0x08003399
 800328c:	08003399 	.word	0x08003399
 8003290:	08003357 	.word	0x08003357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f9dc 	bl	8003658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0208 	orr.w	r2, r2, #8
 80032ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0204 	bic.w	r2, r2, #4
 80032be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6999      	ldr	r1, [r3, #24]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	619a      	str	r2, [r3, #24]
      break;
 80032d2:	e064      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fa22 	bl	8003724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6999      	ldr	r1, [r3, #24]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	021a      	lsls	r2, r3, #8
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	619a      	str	r2, [r3, #24]
      break;
 8003314:	e043      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fa6d 	bl	80037fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0208 	orr.w	r2, r2, #8
 8003330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0204 	bic.w	r2, r2, #4
 8003340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69d9      	ldr	r1, [r3, #28]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	61da      	str	r2, [r3, #28]
      break;
 8003354:	e023      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fab7 	bl	80038d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69d9      	ldr	r1, [r3, #28]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	021a      	lsls	r2, r3, #8
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	61da      	str	r2, [r3, #28]
      break;
 8003396:	e002      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_ConfigClockSource+0x1c>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0b4      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x186>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003404:	d03e      	beq.n	8003484 <HAL_TIM_ConfigClockSource+0xd4>
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	f200 8087 	bhi.w	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	f000 8086 	beq.w	8003522 <HAL_TIM_ConfigClockSource+0x172>
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	d87f      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b70      	cmp	r3, #112	; 0x70
 800341e:	d01a      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xa6>
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d87b      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b60      	cmp	r3, #96	; 0x60
 8003426:	d050      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x11a>
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d877      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b50      	cmp	r3, #80	; 0x50
 800342e:	d03c      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0xfa>
 8003430:	2b50      	cmp	r3, #80	; 0x50
 8003432:	d873      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d058      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x13a>
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d86f      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b30      	cmp	r3, #48	; 0x30
 800343e:	d064      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003440:	2b30      	cmp	r3, #48	; 0x30
 8003442:	d86b      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d060      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003448:	2b20      	cmp	r3, #32
 800344a:	d867      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05c      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	2b10      	cmp	r3, #16
 8003452:	d05a      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003454:	e062      	b.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003466:	f000 fafd 	bl	8003a64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	609a      	str	r2, [r3, #8]
      break;
 8003482:	e04f      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003494:	f000 fae6 	bl	8003a64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a6:	609a      	str	r2, [r3, #8]
      break;
 80034a8:	e03c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b6:	461a      	mov	r2, r3
 80034b8:	f000 fa5a 	bl	8003970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2150      	movs	r1, #80	; 0x50
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fab3 	bl	8003a2e <TIM_ITRx_SetConfig>
      break;
 80034c8:	e02c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fa79 	bl	80039ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2160      	movs	r1, #96	; 0x60
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 faa3 	bl	8003a2e <TIM_ITRx_SetConfig>
      break;
 80034e8:	e01c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fa3a 	bl	8003970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2140      	movs	r1, #64	; 0x40
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa93 	bl	8003a2e <TIM_ITRx_SetConfig>
      break;
 8003508:	e00c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f000 fa8a 	bl	8003a2e <TIM_ITRx_SetConfig>
      break;
 800351a:	e003      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      break;
 8003520:	e000      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3a      	ldr	r2, [pc, #232]	; (800363c <TIM_Base_SetConfig+0xfc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00f      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d00b      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a37      	ldr	r2, [pc, #220]	; (8003640 <TIM_Base_SetConfig+0x100>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a36      	ldr	r2, [pc, #216]	; (8003644 <TIM_Base_SetConfig+0x104>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0x38>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a35      	ldr	r2, [pc, #212]	; (8003648 <TIM_Base_SetConfig+0x108>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d108      	bne.n	800358a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2b      	ldr	r2, [pc, #172]	; (800363c <TIM_Base_SetConfig+0xfc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01b      	beq.n	80035ca <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d017      	beq.n	80035ca <TIM_Base_SetConfig+0x8a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <TIM_Base_SetConfig+0x100>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <TIM_Base_SetConfig+0x8a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a27      	ldr	r2, [pc, #156]	; (8003644 <TIM_Base_SetConfig+0x104>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0x8a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a26      	ldr	r2, [pc, #152]	; (8003648 <TIM_Base_SetConfig+0x108>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x8a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a25      	ldr	r2, [pc, #148]	; (800364c <TIM_Base_SetConfig+0x10c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x8a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <TIM_Base_SetConfig+0x110>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x8a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a23      	ldr	r2, [pc, #140]	; (8003654 <TIM_Base_SetConfig+0x114>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a0e      	ldr	r2, [pc, #56]	; (800363c <TIM_Base_SetConfig+0xfc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d103      	bne.n	8003610 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]
  }
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40010000 	.word	0x40010000
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800
 8003648:	40000c00 	.word	0x40000c00
 800364c:	40014000 	.word	0x40014000
 8003650:	40014400 	.word	0x40014400
 8003654:	40014800 	.word	0x40014800

08003658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f023 0201 	bic.w	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0303 	bic.w	r3, r3, #3
 800368e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 0302 	bic.w	r3, r3, #2
 80036a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <TIM_OC1_SetConfig+0xc8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d10c      	bne.n	80036ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0308 	bic.w	r3, r3, #8
 80036ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a13      	ldr	r2, [pc, #76]	; (8003720 <TIM_OC1_SetConfig+0xc8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d111      	bne.n	80036fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40010000 	.word	0x40010000

08003724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f023 0210 	bic.w	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0320 	bic.w	r3, r3, #32
 800376e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <TIM_OC2_SetConfig+0xd4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d10d      	bne.n	80037a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800378a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <TIM_OC2_SetConfig+0xd4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d113      	bne.n	80037d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40010000 	.word	0x40010000

080037fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <TIM_OC3_SetConfig+0xd0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10d      	bne.n	8003876 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a14      	ldr	r2, [pc, #80]	; (80038cc <TIM_OC3_SetConfig+0xd0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d113      	bne.n	80038a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40010000 	.word	0x40010000

080038d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800391a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <TIM_OC4_SetConfig+0x9c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d109      	bne.n	8003944 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000

08003970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0201 	bic.w	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800399a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 030a 	bic.w	r3, r3, #10
 80039ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b087      	sub	sp, #28
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f023 0210 	bic.w	r2, r3, #16
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	031b      	lsls	r3, r3, #12
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f043 0307 	orr.w	r3, r3, #7
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1a      	ldr	r2, [r3, #32]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e050      	b.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d013      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10c      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40014000 	.word	0x40014000

08003bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e03d      	b.n	8003c64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e042      	b.n	8003d08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fd38 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f82b 	bl	8003d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b0c0      	sub	sp, #256	; 0x100
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	68d9      	ldr	r1, [r3, #12]
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	ea40 0301 	orr.w	r3, r0, r1
 8003d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d68:	f021 010c 	bic.w	r1, r1, #12
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d76:	430b      	orrs	r3, r1
 8003d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	6999      	ldr	r1, [r3, #24]
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	ea40 0301 	orr.w	r3, r0, r1
 8003d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b8f      	ldr	r3, [pc, #572]	; (8003fdc <UART_SetConfig+0x2cc>)
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d005      	beq.n	8003db0 <UART_SetConfig+0xa0>
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b8d      	ldr	r3, [pc, #564]	; (8003fe0 <UART_SetConfig+0x2d0>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d104      	bne.n	8003dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7fe fdba 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8003db4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003db8:	e003      	b.n	8003dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dba:	f7fe fda1 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8003dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dcc:	f040 810c 	bne.w	8003fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003de2:	4622      	mov	r2, r4
 8003de4:	462b      	mov	r3, r5
 8003de6:	1891      	adds	r1, r2, r2
 8003de8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dea:	415b      	adcs	r3, r3
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003df2:	4621      	mov	r1, r4
 8003df4:	eb12 0801 	adds.w	r8, r2, r1
 8003df8:	4629      	mov	r1, r5
 8003dfa:	eb43 0901 	adc.w	r9, r3, r1
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e12:	4690      	mov	r8, r2
 8003e14:	4699      	mov	r9, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	eb18 0303 	adds.w	r3, r8, r3
 8003e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e20:	462b      	mov	r3, r5
 8003e22:	eb49 0303 	adc.w	r3, r9, r3
 8003e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e3e:	460b      	mov	r3, r1
 8003e40:	18db      	adds	r3, r3, r3
 8003e42:	653b      	str	r3, [r7, #80]	; 0x50
 8003e44:	4613      	mov	r3, r2
 8003e46:	eb42 0303 	adc.w	r3, r2, r3
 8003e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e54:	f7fc fa14 	bl	8000280 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	011c      	lsls	r4, r3, #4
 8003e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	1891      	adds	r1, r2, r2
 8003e7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e80:	415b      	adcs	r3, r3
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e88:	4641      	mov	r1, r8
 8003e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e8e:	4649      	mov	r1, r9
 8003e90:	eb43 0b01 	adc.w	fp, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea8:	4692      	mov	sl, r2
 8003eaa:	469b      	mov	fp, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	eb1a 0303 	adds.w	r3, sl, r3
 8003eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	18db      	adds	r3, r3, r3
 8003ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eda:	4613      	mov	r3, r2
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003eea:	f7fc f9c9 	bl	8000280 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2264      	movs	r2, #100	; 0x64
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	1acb      	subs	r3, r1, r3
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f18:	441c      	add	r4, r3
 8003f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f34:	415b      	adcs	r3, r3
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	1851      	adds	r1, r2, r1
 8003f40:	6339      	str	r1, [r7, #48]	; 0x30
 8003f42:	4649      	mov	r1, r9
 8003f44:	414b      	adcs	r3, r1
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f54:	4659      	mov	r1, fp
 8003f56:	00cb      	lsls	r3, r1, #3
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5e:	4651      	mov	r1, sl
 8003f60:	00ca      	lsls	r2, r1, #3
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	4642      	mov	r2, r8
 8003f6a:	189b      	adds	r3, r3, r2
 8003f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f70:	464b      	mov	r3, r9
 8003f72:	460a      	mov	r2, r1
 8003f74:	eb42 0303 	adc.w	r3, r2, r3
 8003f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f90:	460b      	mov	r3, r1
 8003f92:	18db      	adds	r3, r3, r3
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f96:	4613      	mov	r3, r2
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fa6:	f7fc f96b 	bl	8000280 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	2164      	movs	r1, #100	; 0x64
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	3332      	adds	r3, #50	; 0x32
 8003fc2:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <UART_SetConfig+0x2d4>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	f003 0207 	and.w	r2, r3, #7
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4422      	add	r2, r4
 8003fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd8:	e106      	b.n	80041e8 <UART_SetConfig+0x4d8>
 8003fda:	bf00      	nop
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	40011400 	.word	0x40011400
 8003fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	1891      	adds	r1, r2, r2
 8004000:	6239      	str	r1, [r7, #32]
 8004002:	415b      	adcs	r3, r3
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800400a:	4641      	mov	r1, r8
 800400c:	1854      	adds	r4, r2, r1
 800400e:	4649      	mov	r1, r9
 8004010:	eb43 0501 	adc.w	r5, r3, r1
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	00eb      	lsls	r3, r5, #3
 800401e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004022:	00e2      	lsls	r2, r4, #3
 8004024:	4614      	mov	r4, r2
 8004026:	461d      	mov	r5, r3
 8004028:	4643      	mov	r3, r8
 800402a:	18e3      	adds	r3, r4, r3
 800402c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004030:	464b      	mov	r3, r9
 8004032:	eb45 0303 	adc.w	r3, r5, r3
 8004036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004056:	4629      	mov	r1, r5
 8004058:	008b      	lsls	r3, r1, #2
 800405a:	4621      	mov	r1, r4
 800405c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004060:	4621      	mov	r1, r4
 8004062:	008a      	lsls	r2, r1, #2
 8004064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004068:	f7fc f90a 	bl	8000280 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4b60      	ldr	r3, [pc, #384]	; (80041f4 <UART_SetConfig+0x4e4>)
 8004072:	fba3 2302 	umull	r2, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	011c      	lsls	r4, r3, #4
 800407a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004084:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	1891      	adds	r1, r2, r2
 8004092:	61b9      	str	r1, [r7, #24]
 8004094:	415b      	adcs	r3, r3
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800409c:	4641      	mov	r1, r8
 800409e:	1851      	adds	r1, r2, r1
 80040a0:	6139      	str	r1, [r7, #16]
 80040a2:	4649      	mov	r1, r9
 80040a4:	414b      	adcs	r3, r1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b4:	4659      	mov	r1, fp
 80040b6:	00cb      	lsls	r3, r1, #3
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040be:	4651      	mov	r1, sl
 80040c0:	00ca      	lsls	r2, r1, #3
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	4642      	mov	r2, r8
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040d0:	464b      	mov	r3, r9
 80040d2:	460a      	mov	r2, r1
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040f4:	4649      	mov	r1, r9
 80040f6:	008b      	lsls	r3, r1, #2
 80040f8:	4641      	mov	r1, r8
 80040fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fe:	4641      	mov	r1, r8
 8004100:	008a      	lsls	r2, r1, #2
 8004102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004106:	f7fc f8bb 	bl	8000280 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4611      	mov	r1, r2
 8004110:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <UART_SetConfig+0x4e4>)
 8004112:	fba3 2301 	umull	r2, r3, r3, r1
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2264      	movs	r2, #100	; 0x64
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	1acb      	subs	r3, r1, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a33      	ldr	r2, [pc, #204]	; (80041f4 <UART_SetConfig+0x4e4>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004130:	441c      	add	r4, r3
 8004132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004136:	2200      	movs	r2, #0
 8004138:	673b      	str	r3, [r7, #112]	; 0x70
 800413a:	677a      	str	r2, [r7, #116]	; 0x74
 800413c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	1891      	adds	r1, r2, r2
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	415b      	adcs	r3, r3
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004150:	4641      	mov	r1, r8
 8004152:	1851      	adds	r1, r2, r1
 8004154:	6039      	str	r1, [r7, #0]
 8004156:	4649      	mov	r1, r9
 8004158:	414b      	adcs	r3, r1
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004168:	4659      	mov	r1, fp
 800416a:	00cb      	lsls	r3, r1, #3
 800416c:	4651      	mov	r1, sl
 800416e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004172:	4651      	mov	r1, sl
 8004174:	00ca      	lsls	r2, r1, #3
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	4603      	mov	r3, r0
 800417c:	4642      	mov	r2, r8
 800417e:	189b      	adds	r3, r3, r2
 8004180:	66bb      	str	r3, [r7, #104]	; 0x68
 8004182:	464b      	mov	r3, r9
 8004184:	460a      	mov	r2, r1
 8004186:	eb42 0303 	adc.w	r3, r2, r3
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	663b      	str	r3, [r7, #96]	; 0x60
 8004196:	667a      	str	r2, [r7, #100]	; 0x64
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041a4:	4649      	mov	r1, r9
 80041a6:	008b      	lsls	r3, r1, #2
 80041a8:	4641      	mov	r1, r8
 80041aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ae:	4641      	mov	r1, r8
 80041b0:	008a      	lsls	r2, r1, #2
 80041b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041b6:	f7fc f863 	bl	8000280 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <UART_SetConfig+0x4e4>)
 80041c0:	fba3 1302 	umull	r1, r3, r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	2164      	movs	r1, #100	; 0x64
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	3332      	adds	r3, #50	; 0x32
 80041d2:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <UART_SetConfig+0x4e4>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	f003 020f 	and.w	r2, r3, #15
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4422      	add	r2, r4
 80041e6:	609a      	str	r2, [r3, #8]
}
 80041e8:	bf00      	nop
 80041ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041ee:	46bd      	mov	sp, r7
 80041f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f4:	51eb851f 	.word	0x51eb851f

080041f8 <__assert_func>:
 80041f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041fa:	4614      	mov	r4, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <__assert_func+0x2c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4605      	mov	r5, r0
 8004204:	68d8      	ldr	r0, [r3, #12]
 8004206:	b14c      	cbz	r4, 800421c <__assert_func+0x24>
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <__assert_func+0x30>)
 800420a:	9100      	str	r1, [sp, #0]
 800420c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004210:	4906      	ldr	r1, [pc, #24]	; (800422c <__assert_func+0x34>)
 8004212:	462b      	mov	r3, r5
 8004214:	f000 f8b2 	bl	800437c <fiprintf>
 8004218:	f000 f9b1 	bl	800457e <abort>
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <__assert_func+0x38>)
 800421e:	461c      	mov	r4, r3
 8004220:	e7f3      	b.n	800420a <__assert_func+0x12>
 8004222:	bf00      	nop
 8004224:	20000064 	.word	0x20000064
 8004228:	080052b8 	.word	0x080052b8
 800422c:	080052c5 	.word	0x080052c5
 8004230:	080052f3 	.word	0x080052f3

08004234 <std>:
 8004234:	2300      	movs	r3, #0
 8004236:	b510      	push	{r4, lr}
 8004238:	4604      	mov	r4, r0
 800423a:	e9c0 3300 	strd	r3, r3, [r0]
 800423e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004242:	6083      	str	r3, [r0, #8]
 8004244:	8181      	strh	r1, [r0, #12]
 8004246:	6643      	str	r3, [r0, #100]	; 0x64
 8004248:	81c2      	strh	r2, [r0, #14]
 800424a:	6183      	str	r3, [r0, #24]
 800424c:	4619      	mov	r1, r3
 800424e:	2208      	movs	r2, #8
 8004250:	305c      	adds	r0, #92	; 0x5c
 8004252:	f000 f918 	bl	8004486 <memset>
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <std+0x58>)
 8004258:	6263      	str	r3, [r4, #36]	; 0x24
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <std+0x5c>)
 800425c:	62a3      	str	r3, [r4, #40]	; 0x28
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <std+0x60>)
 8004260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <std+0x64>)
 8004264:	6323      	str	r3, [r4, #48]	; 0x30
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <std+0x68>)
 8004268:	6224      	str	r4, [r4, #32]
 800426a:	429c      	cmp	r4, r3
 800426c:	d006      	beq.n	800427c <std+0x48>
 800426e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004272:	4294      	cmp	r4, r2
 8004274:	d002      	beq.n	800427c <std+0x48>
 8004276:	33d0      	adds	r3, #208	; 0xd0
 8004278:	429c      	cmp	r4, r3
 800427a:	d105      	bne.n	8004288 <std+0x54>
 800427c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004284:	f000 b978 	b.w	8004578 <__retarget_lock_init_recursive>
 8004288:	bd10      	pop	{r4, pc}
 800428a:	bf00      	nop
 800428c:	08004401 	.word	0x08004401
 8004290:	08004423 	.word	0x08004423
 8004294:	0800445b 	.word	0x0800445b
 8004298:	0800447f 	.word	0x0800447f
 800429c:	2000020c 	.word	0x2000020c

080042a0 <stdio_exit_handler>:
 80042a0:	4a02      	ldr	r2, [pc, #8]	; (80042ac <stdio_exit_handler+0xc>)
 80042a2:	4903      	ldr	r1, [pc, #12]	; (80042b0 <stdio_exit_handler+0x10>)
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <stdio_exit_handler+0x14>)
 80042a6:	f000 b87b 	b.w	80043a0 <_fwalk_sglue>
 80042aa:	bf00      	nop
 80042ac:	2000000c 	.word	0x2000000c
 80042b0:	08004e31 	.word	0x08004e31
 80042b4:	20000018 	.word	0x20000018

080042b8 <cleanup_stdio>:
 80042b8:	6841      	ldr	r1, [r0, #4]
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <cleanup_stdio+0x34>)
 80042bc:	4299      	cmp	r1, r3
 80042be:	b510      	push	{r4, lr}
 80042c0:	4604      	mov	r4, r0
 80042c2:	d001      	beq.n	80042c8 <cleanup_stdio+0x10>
 80042c4:	f000 fdb4 	bl	8004e30 <_fflush_r>
 80042c8:	68a1      	ldr	r1, [r4, #8]
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <cleanup_stdio+0x38>)
 80042cc:	4299      	cmp	r1, r3
 80042ce:	d002      	beq.n	80042d6 <cleanup_stdio+0x1e>
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 fdad 	bl	8004e30 <_fflush_r>
 80042d6:	68e1      	ldr	r1, [r4, #12]
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <cleanup_stdio+0x3c>)
 80042da:	4299      	cmp	r1, r3
 80042dc:	d004      	beq.n	80042e8 <cleanup_stdio+0x30>
 80042de:	4620      	mov	r0, r4
 80042e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e4:	f000 bda4 	b.w	8004e30 <_fflush_r>
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	bf00      	nop
 80042ec:	2000020c 	.word	0x2000020c
 80042f0:	20000274 	.word	0x20000274
 80042f4:	200002dc 	.word	0x200002dc

080042f8 <global_stdio_init.part.0>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <global_stdio_init.part.0+0x30>)
 80042fc:	4c0b      	ldr	r4, [pc, #44]	; (800432c <global_stdio_init.part.0+0x34>)
 80042fe:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <global_stdio_init.part.0+0x38>)
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	4620      	mov	r0, r4
 8004304:	2200      	movs	r2, #0
 8004306:	2104      	movs	r1, #4
 8004308:	f7ff ff94 	bl	8004234 <std>
 800430c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004310:	2201      	movs	r2, #1
 8004312:	2109      	movs	r1, #9
 8004314:	f7ff ff8e 	bl	8004234 <std>
 8004318:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800431c:	2202      	movs	r2, #2
 800431e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004322:	2112      	movs	r1, #18
 8004324:	f7ff bf86 	b.w	8004234 <std>
 8004328:	20000344 	.word	0x20000344
 800432c:	2000020c 	.word	0x2000020c
 8004330:	080042a1 	.word	0x080042a1

08004334 <__sfp_lock_acquire>:
 8004334:	4801      	ldr	r0, [pc, #4]	; (800433c <__sfp_lock_acquire+0x8>)
 8004336:	f000 b920 	b.w	800457a <__retarget_lock_acquire_recursive>
 800433a:	bf00      	nop
 800433c:	2000034d 	.word	0x2000034d

08004340 <__sfp_lock_release>:
 8004340:	4801      	ldr	r0, [pc, #4]	; (8004348 <__sfp_lock_release+0x8>)
 8004342:	f000 b91b 	b.w	800457c <__retarget_lock_release_recursive>
 8004346:	bf00      	nop
 8004348:	2000034d 	.word	0x2000034d

0800434c <__sinit>:
 800434c:	b510      	push	{r4, lr}
 800434e:	4604      	mov	r4, r0
 8004350:	f7ff fff0 	bl	8004334 <__sfp_lock_acquire>
 8004354:	6a23      	ldr	r3, [r4, #32]
 8004356:	b11b      	cbz	r3, 8004360 <__sinit+0x14>
 8004358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435c:	f7ff bff0 	b.w	8004340 <__sfp_lock_release>
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <__sinit+0x28>)
 8004362:	6223      	str	r3, [r4, #32]
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <__sinit+0x2c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f5      	bne.n	8004358 <__sinit+0xc>
 800436c:	f7ff ffc4 	bl	80042f8 <global_stdio_init.part.0>
 8004370:	e7f2      	b.n	8004358 <__sinit+0xc>
 8004372:	bf00      	nop
 8004374:	080042b9 	.word	0x080042b9
 8004378:	20000344 	.word	0x20000344

0800437c <fiprintf>:
 800437c:	b40e      	push	{r1, r2, r3}
 800437e:	b503      	push	{r0, r1, lr}
 8004380:	4601      	mov	r1, r0
 8004382:	ab03      	add	r3, sp, #12
 8004384:	4805      	ldr	r0, [pc, #20]	; (800439c <fiprintf+0x20>)
 8004386:	f853 2b04 	ldr.w	r2, [r3], #4
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	f000 fa1f 	bl	80047d0 <_vfiprintf_r>
 8004392:	b002      	add	sp, #8
 8004394:	f85d eb04 	ldr.w	lr, [sp], #4
 8004398:	b003      	add	sp, #12
 800439a:	4770      	bx	lr
 800439c:	20000064 	.word	0x20000064

080043a0 <_fwalk_sglue>:
 80043a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a4:	4607      	mov	r7, r0
 80043a6:	4688      	mov	r8, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	2600      	movs	r6, #0
 80043ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b0:	f1b9 0901 	subs.w	r9, r9, #1
 80043b4:	d505      	bpl.n	80043c2 <_fwalk_sglue+0x22>
 80043b6:	6824      	ldr	r4, [r4, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1f7      	bne.n	80043ac <_fwalk_sglue+0xc>
 80043bc:	4630      	mov	r0, r6
 80043be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d907      	bls.n	80043d8 <_fwalk_sglue+0x38>
 80043c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043cc:	3301      	adds	r3, #1
 80043ce:	d003      	beq.n	80043d8 <_fwalk_sglue+0x38>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	4306      	orrs	r6, r0
 80043d8:	3568      	adds	r5, #104	; 0x68
 80043da:	e7e9      	b.n	80043b0 <_fwalk_sglue+0x10>

080043dc <iprintf>:
 80043dc:	b40f      	push	{r0, r1, r2, r3}
 80043de:	b507      	push	{r0, r1, r2, lr}
 80043e0:	4906      	ldr	r1, [pc, #24]	; (80043fc <iprintf+0x20>)
 80043e2:	ab04      	add	r3, sp, #16
 80043e4:	6808      	ldr	r0, [r1, #0]
 80043e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ea:	6881      	ldr	r1, [r0, #8]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	f000 f9ef 	bl	80047d0 <_vfiprintf_r>
 80043f2:	b003      	add	sp, #12
 80043f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043f8:	b004      	add	sp, #16
 80043fa:	4770      	bx	lr
 80043fc:	20000064 	.word	0x20000064

08004400 <__sread>:
 8004400:	b510      	push	{r4, lr}
 8004402:	460c      	mov	r4, r1
 8004404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004408:	f000 f868 	bl	80044dc <_read_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	bfab      	itete	ge
 8004410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004412:	89a3      	ldrhlt	r3, [r4, #12]
 8004414:	181b      	addge	r3, r3, r0
 8004416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800441a:	bfac      	ite	ge
 800441c:	6563      	strge	r3, [r4, #84]	; 0x54
 800441e:	81a3      	strhlt	r3, [r4, #12]
 8004420:	bd10      	pop	{r4, pc}

08004422 <__swrite>:
 8004422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004426:	461f      	mov	r7, r3
 8004428:	898b      	ldrh	r3, [r1, #12]
 800442a:	05db      	lsls	r3, r3, #23
 800442c:	4605      	mov	r5, r0
 800442e:	460c      	mov	r4, r1
 8004430:	4616      	mov	r6, r2
 8004432:	d505      	bpl.n	8004440 <__swrite+0x1e>
 8004434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004438:	2302      	movs	r3, #2
 800443a:	2200      	movs	r2, #0
 800443c:	f000 f83c 	bl	80044b8 <_lseek_r>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800444a:	81a3      	strh	r3, [r4, #12]
 800444c:	4632      	mov	r2, r6
 800444e:	463b      	mov	r3, r7
 8004450:	4628      	mov	r0, r5
 8004452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	f000 b853 	b.w	8004500 <_write_r>

0800445a <__sseek>:
 800445a:	b510      	push	{r4, lr}
 800445c:	460c      	mov	r4, r1
 800445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004462:	f000 f829 	bl	80044b8 <_lseek_r>
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	bf15      	itete	ne
 800446c:	6560      	strne	r0, [r4, #84]	; 0x54
 800446e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004476:	81a3      	strheq	r3, [r4, #12]
 8004478:	bf18      	it	ne
 800447a:	81a3      	strhne	r3, [r4, #12]
 800447c:	bd10      	pop	{r4, pc}

0800447e <__sclose>:
 800447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004482:	f000 b809 	b.w	8004498 <_close_r>

08004486 <memset>:
 8004486:	4402      	add	r2, r0
 8004488:	4603      	mov	r3, r0
 800448a:	4293      	cmp	r3, r2
 800448c:	d100      	bne.n	8004490 <memset+0xa>
 800448e:	4770      	bx	lr
 8004490:	f803 1b01 	strb.w	r1, [r3], #1
 8004494:	e7f9      	b.n	800448a <memset+0x4>
	...

08004498 <_close_r>:
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4d06      	ldr	r5, [pc, #24]	; (80044b4 <_close_r+0x1c>)
 800449c:	2300      	movs	r3, #0
 800449e:	4604      	mov	r4, r0
 80044a0:	4608      	mov	r0, r1
 80044a2:	602b      	str	r3, [r5, #0]
 80044a4:	f7fd f9e3 	bl	800186e <_close>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_close_r+0x1a>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_close_r+0x1a>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	20000348 	.word	0x20000348

080044b8 <_lseek_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4d07      	ldr	r5, [pc, #28]	; (80044d8 <_lseek_r+0x20>)
 80044bc:	4604      	mov	r4, r0
 80044be:	4608      	mov	r0, r1
 80044c0:	4611      	mov	r1, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	602a      	str	r2, [r5, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7fd f9f8 	bl	80018bc <_lseek>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_lseek_r+0x1e>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_lseek_r+0x1e>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	20000348 	.word	0x20000348

080044dc <_read_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d07      	ldr	r5, [pc, #28]	; (80044fc <_read_r+0x20>)
 80044e0:	4604      	mov	r4, r0
 80044e2:	4608      	mov	r0, r1
 80044e4:	4611      	mov	r1, r2
 80044e6:	2200      	movs	r2, #0
 80044e8:	602a      	str	r2, [r5, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7fd f9a2 	bl	8001834 <_read>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_read_r+0x1e>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_read_r+0x1e>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	20000348 	.word	0x20000348

08004500 <_write_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	; (8004520 <_write_r+0x20>)
 8004504:	4604      	mov	r4, r0
 8004506:	4608      	mov	r0, r1
 8004508:	4611      	mov	r1, r2
 800450a:	2200      	movs	r2, #0
 800450c:	602a      	str	r2, [r5, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f7fc ffee 	bl	80014f0 <_write>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_write_r+0x1e>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_write_r+0x1e>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	20000348 	.word	0x20000348

08004524 <__errno>:
 8004524:	4b01      	ldr	r3, [pc, #4]	; (800452c <__errno+0x8>)
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000064 	.word	0x20000064

08004530 <__libc_init_array>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4d0d      	ldr	r5, [pc, #52]	; (8004568 <__libc_init_array+0x38>)
 8004534:	4c0d      	ldr	r4, [pc, #52]	; (800456c <__libc_init_array+0x3c>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	2600      	movs	r6, #0
 800453c:	42a6      	cmp	r6, r4
 800453e:	d109      	bne.n	8004554 <__libc_init_array+0x24>
 8004540:	4d0b      	ldr	r5, [pc, #44]	; (8004570 <__libc_init_array+0x40>)
 8004542:	4c0c      	ldr	r4, [pc, #48]	; (8004574 <__libc_init_array+0x44>)
 8004544:	f000 fe0a 	bl	800515c <_init>
 8004548:	1b64      	subs	r4, r4, r5
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	2600      	movs	r6, #0
 800454e:	42a6      	cmp	r6, r4
 8004550:	d105      	bne.n	800455e <__libc_init_array+0x2e>
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	f855 3b04 	ldr.w	r3, [r5], #4
 8004558:	4798      	blx	r3
 800455a:	3601      	adds	r6, #1
 800455c:	e7ee      	b.n	800453c <__libc_init_array+0xc>
 800455e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004562:	4798      	blx	r3
 8004564:	3601      	adds	r6, #1
 8004566:	e7f2      	b.n	800454e <__libc_init_array+0x1e>
 8004568:	08005330 	.word	0x08005330
 800456c:	08005330 	.word	0x08005330
 8004570:	08005330 	.word	0x08005330
 8004574:	08005334 	.word	0x08005334

08004578 <__retarget_lock_init_recursive>:
 8004578:	4770      	bx	lr

0800457a <__retarget_lock_acquire_recursive>:
 800457a:	4770      	bx	lr

0800457c <__retarget_lock_release_recursive>:
 800457c:	4770      	bx	lr

0800457e <abort>:
 800457e:	b508      	push	{r3, lr}
 8004580:	2006      	movs	r0, #6
 8004582:	f000 fd3b 	bl	8004ffc <raise>
 8004586:	2001      	movs	r0, #1
 8004588:	f7fd f94a 	bl	8001820 <_exit>

0800458c <_free_r>:
 800458c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800458e:	2900      	cmp	r1, #0
 8004590:	d044      	beq.n	800461c <_free_r+0x90>
 8004592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004596:	9001      	str	r0, [sp, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f1a1 0404 	sub.w	r4, r1, #4
 800459e:	bfb8      	it	lt
 80045a0:	18e4      	addlt	r4, r4, r3
 80045a2:	f000 f8df 	bl	8004764 <__malloc_lock>
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <_free_r+0x94>)
 80045a8:	9801      	ldr	r0, [sp, #4]
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	b933      	cbnz	r3, 80045bc <_free_r+0x30>
 80045ae:	6063      	str	r3, [r4, #4]
 80045b0:	6014      	str	r4, [r2, #0]
 80045b2:	b003      	add	sp, #12
 80045b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045b8:	f000 b8da 	b.w	8004770 <__malloc_unlock>
 80045bc:	42a3      	cmp	r3, r4
 80045be:	d908      	bls.n	80045d2 <_free_r+0x46>
 80045c0:	6825      	ldr	r5, [r4, #0]
 80045c2:	1961      	adds	r1, r4, r5
 80045c4:	428b      	cmp	r3, r1
 80045c6:	bf01      	itttt	eq
 80045c8:	6819      	ldreq	r1, [r3, #0]
 80045ca:	685b      	ldreq	r3, [r3, #4]
 80045cc:	1949      	addeq	r1, r1, r5
 80045ce:	6021      	streq	r1, [r4, #0]
 80045d0:	e7ed      	b.n	80045ae <_free_r+0x22>
 80045d2:	461a      	mov	r2, r3
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	b10b      	cbz	r3, 80045dc <_free_r+0x50>
 80045d8:	42a3      	cmp	r3, r4
 80045da:	d9fa      	bls.n	80045d2 <_free_r+0x46>
 80045dc:	6811      	ldr	r1, [r2, #0]
 80045de:	1855      	adds	r5, r2, r1
 80045e0:	42a5      	cmp	r5, r4
 80045e2:	d10b      	bne.n	80045fc <_free_r+0x70>
 80045e4:	6824      	ldr	r4, [r4, #0]
 80045e6:	4421      	add	r1, r4
 80045e8:	1854      	adds	r4, r2, r1
 80045ea:	42a3      	cmp	r3, r4
 80045ec:	6011      	str	r1, [r2, #0]
 80045ee:	d1e0      	bne.n	80045b2 <_free_r+0x26>
 80045f0:	681c      	ldr	r4, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	6053      	str	r3, [r2, #4]
 80045f6:	440c      	add	r4, r1
 80045f8:	6014      	str	r4, [r2, #0]
 80045fa:	e7da      	b.n	80045b2 <_free_r+0x26>
 80045fc:	d902      	bls.n	8004604 <_free_r+0x78>
 80045fe:	230c      	movs	r3, #12
 8004600:	6003      	str	r3, [r0, #0]
 8004602:	e7d6      	b.n	80045b2 <_free_r+0x26>
 8004604:	6825      	ldr	r5, [r4, #0]
 8004606:	1961      	adds	r1, r4, r5
 8004608:	428b      	cmp	r3, r1
 800460a:	bf04      	itt	eq
 800460c:	6819      	ldreq	r1, [r3, #0]
 800460e:	685b      	ldreq	r3, [r3, #4]
 8004610:	6063      	str	r3, [r4, #4]
 8004612:	bf04      	itt	eq
 8004614:	1949      	addeq	r1, r1, r5
 8004616:	6021      	streq	r1, [r4, #0]
 8004618:	6054      	str	r4, [r2, #4]
 800461a:	e7ca      	b.n	80045b2 <_free_r+0x26>
 800461c:	b003      	add	sp, #12
 800461e:	bd30      	pop	{r4, r5, pc}
 8004620:	20000350 	.word	0x20000350

08004624 <sbrk_aligned>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4e0e      	ldr	r6, [pc, #56]	; (8004660 <sbrk_aligned+0x3c>)
 8004628:	460c      	mov	r4, r1
 800462a:	6831      	ldr	r1, [r6, #0]
 800462c:	4605      	mov	r5, r0
 800462e:	b911      	cbnz	r1, 8004636 <sbrk_aligned+0x12>
 8004630:	f000 fd00 	bl	8005034 <_sbrk_r>
 8004634:	6030      	str	r0, [r6, #0]
 8004636:	4621      	mov	r1, r4
 8004638:	4628      	mov	r0, r5
 800463a:	f000 fcfb 	bl	8005034 <_sbrk_r>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	d00a      	beq.n	8004658 <sbrk_aligned+0x34>
 8004642:	1cc4      	adds	r4, r0, #3
 8004644:	f024 0403 	bic.w	r4, r4, #3
 8004648:	42a0      	cmp	r0, r4
 800464a:	d007      	beq.n	800465c <sbrk_aligned+0x38>
 800464c:	1a21      	subs	r1, r4, r0
 800464e:	4628      	mov	r0, r5
 8004650:	f000 fcf0 	bl	8005034 <_sbrk_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d101      	bne.n	800465c <sbrk_aligned+0x38>
 8004658:	f04f 34ff 	mov.w	r4, #4294967295
 800465c:	4620      	mov	r0, r4
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	20000354 	.word	0x20000354

08004664 <_malloc_r>:
 8004664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004668:	1ccd      	adds	r5, r1, #3
 800466a:	f025 0503 	bic.w	r5, r5, #3
 800466e:	3508      	adds	r5, #8
 8004670:	2d0c      	cmp	r5, #12
 8004672:	bf38      	it	cc
 8004674:	250c      	movcc	r5, #12
 8004676:	2d00      	cmp	r5, #0
 8004678:	4607      	mov	r7, r0
 800467a:	db01      	blt.n	8004680 <_malloc_r+0x1c>
 800467c:	42a9      	cmp	r1, r5
 800467e:	d905      	bls.n	800468c <_malloc_r+0x28>
 8004680:	230c      	movs	r3, #12
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	2600      	movs	r6, #0
 8004686:	4630      	mov	r0, r6
 8004688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800468c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004760 <_malloc_r+0xfc>
 8004690:	f000 f868 	bl	8004764 <__malloc_lock>
 8004694:	f8d8 3000 	ldr.w	r3, [r8]
 8004698:	461c      	mov	r4, r3
 800469a:	bb5c      	cbnz	r4, 80046f4 <_malloc_r+0x90>
 800469c:	4629      	mov	r1, r5
 800469e:	4638      	mov	r0, r7
 80046a0:	f7ff ffc0 	bl	8004624 <sbrk_aligned>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	4604      	mov	r4, r0
 80046a8:	d155      	bne.n	8004756 <_malloc_r+0xf2>
 80046aa:	f8d8 4000 	ldr.w	r4, [r8]
 80046ae:	4626      	mov	r6, r4
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	d145      	bne.n	8004740 <_malloc_r+0xdc>
 80046b4:	2c00      	cmp	r4, #0
 80046b6:	d048      	beq.n	800474a <_malloc_r+0xe6>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	4631      	mov	r1, r6
 80046bc:	4638      	mov	r0, r7
 80046be:	eb04 0903 	add.w	r9, r4, r3
 80046c2:	f000 fcb7 	bl	8005034 <_sbrk_r>
 80046c6:	4581      	cmp	r9, r0
 80046c8:	d13f      	bne.n	800474a <_malloc_r+0xe6>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	1a6d      	subs	r5, r5, r1
 80046ce:	4629      	mov	r1, r5
 80046d0:	4638      	mov	r0, r7
 80046d2:	f7ff ffa7 	bl	8004624 <sbrk_aligned>
 80046d6:	3001      	adds	r0, #1
 80046d8:	d037      	beq.n	800474a <_malloc_r+0xe6>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	442b      	add	r3, r5
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	f8d8 3000 	ldr.w	r3, [r8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d038      	beq.n	800475a <_malloc_r+0xf6>
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	42a2      	cmp	r2, r4
 80046ec:	d12b      	bne.n	8004746 <_malloc_r+0xe2>
 80046ee:	2200      	movs	r2, #0
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	e00f      	b.n	8004714 <_malloc_r+0xb0>
 80046f4:	6822      	ldr	r2, [r4, #0]
 80046f6:	1b52      	subs	r2, r2, r5
 80046f8:	d41f      	bmi.n	800473a <_malloc_r+0xd6>
 80046fa:	2a0b      	cmp	r2, #11
 80046fc:	d917      	bls.n	800472e <_malloc_r+0xca>
 80046fe:	1961      	adds	r1, r4, r5
 8004700:	42a3      	cmp	r3, r4
 8004702:	6025      	str	r5, [r4, #0]
 8004704:	bf18      	it	ne
 8004706:	6059      	strne	r1, [r3, #4]
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	bf08      	it	eq
 800470c:	f8c8 1000 	streq.w	r1, [r8]
 8004710:	5162      	str	r2, [r4, r5]
 8004712:	604b      	str	r3, [r1, #4]
 8004714:	4638      	mov	r0, r7
 8004716:	f104 060b 	add.w	r6, r4, #11
 800471a:	f000 f829 	bl	8004770 <__malloc_unlock>
 800471e:	f026 0607 	bic.w	r6, r6, #7
 8004722:	1d23      	adds	r3, r4, #4
 8004724:	1af2      	subs	r2, r6, r3
 8004726:	d0ae      	beq.n	8004686 <_malloc_r+0x22>
 8004728:	1b9b      	subs	r3, r3, r6
 800472a:	50a3      	str	r3, [r4, r2]
 800472c:	e7ab      	b.n	8004686 <_malloc_r+0x22>
 800472e:	42a3      	cmp	r3, r4
 8004730:	6862      	ldr	r2, [r4, #4]
 8004732:	d1dd      	bne.n	80046f0 <_malloc_r+0x8c>
 8004734:	f8c8 2000 	str.w	r2, [r8]
 8004738:	e7ec      	b.n	8004714 <_malloc_r+0xb0>
 800473a:	4623      	mov	r3, r4
 800473c:	6864      	ldr	r4, [r4, #4]
 800473e:	e7ac      	b.n	800469a <_malloc_r+0x36>
 8004740:	4634      	mov	r4, r6
 8004742:	6876      	ldr	r6, [r6, #4]
 8004744:	e7b4      	b.n	80046b0 <_malloc_r+0x4c>
 8004746:	4613      	mov	r3, r2
 8004748:	e7cc      	b.n	80046e4 <_malloc_r+0x80>
 800474a:	230c      	movs	r3, #12
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4638      	mov	r0, r7
 8004750:	f000 f80e 	bl	8004770 <__malloc_unlock>
 8004754:	e797      	b.n	8004686 <_malloc_r+0x22>
 8004756:	6025      	str	r5, [r4, #0]
 8004758:	e7dc      	b.n	8004714 <_malloc_r+0xb0>
 800475a:	605b      	str	r3, [r3, #4]
 800475c:	deff      	udf	#255	; 0xff
 800475e:	bf00      	nop
 8004760:	20000350 	.word	0x20000350

08004764 <__malloc_lock>:
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__malloc_lock+0x8>)
 8004766:	f7ff bf08 	b.w	800457a <__retarget_lock_acquire_recursive>
 800476a:	bf00      	nop
 800476c:	2000034c 	.word	0x2000034c

08004770 <__malloc_unlock>:
 8004770:	4801      	ldr	r0, [pc, #4]	; (8004778 <__malloc_unlock+0x8>)
 8004772:	f7ff bf03 	b.w	800457c <__retarget_lock_release_recursive>
 8004776:	bf00      	nop
 8004778:	2000034c 	.word	0x2000034c

0800477c <__sfputc_r>:
 800477c:	6893      	ldr	r3, [r2, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	b410      	push	{r4}
 8004784:	6093      	str	r3, [r2, #8]
 8004786:	da08      	bge.n	800479a <__sfputc_r+0x1e>
 8004788:	6994      	ldr	r4, [r2, #24]
 800478a:	42a3      	cmp	r3, r4
 800478c:	db01      	blt.n	8004792 <__sfputc_r+0x16>
 800478e:	290a      	cmp	r1, #10
 8004790:	d103      	bne.n	800479a <__sfputc_r+0x1e>
 8004792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004796:	f000 bb73 	b.w	8004e80 <__swbuf_r>
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	1c58      	adds	r0, r3, #1
 800479e:	6010      	str	r0, [r2, #0]
 80047a0:	7019      	strb	r1, [r3, #0]
 80047a2:	4608      	mov	r0, r1
 80047a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <__sfputs_r>:
 80047aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ac:	4606      	mov	r6, r0
 80047ae:	460f      	mov	r7, r1
 80047b0:	4614      	mov	r4, r2
 80047b2:	18d5      	adds	r5, r2, r3
 80047b4:	42ac      	cmp	r4, r5
 80047b6:	d101      	bne.n	80047bc <__sfputs_r+0x12>
 80047b8:	2000      	movs	r0, #0
 80047ba:	e007      	b.n	80047cc <__sfputs_r+0x22>
 80047bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c0:	463a      	mov	r2, r7
 80047c2:	4630      	mov	r0, r6
 80047c4:	f7ff ffda 	bl	800477c <__sfputc_r>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d1f3      	bne.n	80047b4 <__sfputs_r+0xa>
 80047cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d0 <_vfiprintf_r>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	460d      	mov	r5, r1
 80047d6:	b09d      	sub	sp, #116	; 0x74
 80047d8:	4614      	mov	r4, r2
 80047da:	4698      	mov	r8, r3
 80047dc:	4606      	mov	r6, r0
 80047de:	b118      	cbz	r0, 80047e8 <_vfiprintf_r+0x18>
 80047e0:	6a03      	ldr	r3, [r0, #32]
 80047e2:	b90b      	cbnz	r3, 80047e8 <_vfiprintf_r+0x18>
 80047e4:	f7ff fdb2 	bl	800434c <__sinit>
 80047e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047ea:	07d9      	lsls	r1, r3, #31
 80047ec:	d405      	bmi.n	80047fa <_vfiprintf_r+0x2a>
 80047ee:	89ab      	ldrh	r3, [r5, #12]
 80047f0:	059a      	lsls	r2, r3, #22
 80047f2:	d402      	bmi.n	80047fa <_vfiprintf_r+0x2a>
 80047f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047f6:	f7ff fec0 	bl	800457a <__retarget_lock_acquire_recursive>
 80047fa:	89ab      	ldrh	r3, [r5, #12]
 80047fc:	071b      	lsls	r3, r3, #28
 80047fe:	d501      	bpl.n	8004804 <_vfiprintf_r+0x34>
 8004800:	692b      	ldr	r3, [r5, #16]
 8004802:	b99b      	cbnz	r3, 800482c <_vfiprintf_r+0x5c>
 8004804:	4629      	mov	r1, r5
 8004806:	4630      	mov	r0, r6
 8004808:	f000 fb78 	bl	8004efc <__swsetup_r>
 800480c:	b170      	cbz	r0, 800482c <_vfiprintf_r+0x5c>
 800480e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004810:	07dc      	lsls	r4, r3, #31
 8004812:	d504      	bpl.n	800481e <_vfiprintf_r+0x4e>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	b01d      	add	sp, #116	; 0x74
 800481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481e:	89ab      	ldrh	r3, [r5, #12]
 8004820:	0598      	lsls	r0, r3, #22
 8004822:	d4f7      	bmi.n	8004814 <_vfiprintf_r+0x44>
 8004824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004826:	f7ff fea9 	bl	800457c <__retarget_lock_release_recursive>
 800482a:	e7f3      	b.n	8004814 <_vfiprintf_r+0x44>
 800482c:	2300      	movs	r3, #0
 800482e:	9309      	str	r3, [sp, #36]	; 0x24
 8004830:	2320      	movs	r3, #32
 8004832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004836:	f8cd 800c 	str.w	r8, [sp, #12]
 800483a:	2330      	movs	r3, #48	; 0x30
 800483c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80049f0 <_vfiprintf_r+0x220>
 8004840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004844:	f04f 0901 	mov.w	r9, #1
 8004848:	4623      	mov	r3, r4
 800484a:	469a      	mov	sl, r3
 800484c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004850:	b10a      	cbz	r2, 8004856 <_vfiprintf_r+0x86>
 8004852:	2a25      	cmp	r2, #37	; 0x25
 8004854:	d1f9      	bne.n	800484a <_vfiprintf_r+0x7a>
 8004856:	ebba 0b04 	subs.w	fp, sl, r4
 800485a:	d00b      	beq.n	8004874 <_vfiprintf_r+0xa4>
 800485c:	465b      	mov	r3, fp
 800485e:	4622      	mov	r2, r4
 8004860:	4629      	mov	r1, r5
 8004862:	4630      	mov	r0, r6
 8004864:	f7ff ffa1 	bl	80047aa <__sfputs_r>
 8004868:	3001      	adds	r0, #1
 800486a:	f000 80a9 	beq.w	80049c0 <_vfiprintf_r+0x1f0>
 800486e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004870:	445a      	add	r2, fp
 8004872:	9209      	str	r2, [sp, #36]	; 0x24
 8004874:	f89a 3000 	ldrb.w	r3, [sl]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a1 	beq.w	80049c0 <_vfiprintf_r+0x1f0>
 800487e:	2300      	movs	r3, #0
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004888:	f10a 0a01 	add.w	sl, sl, #1
 800488c:	9304      	str	r3, [sp, #16]
 800488e:	9307      	str	r3, [sp, #28]
 8004890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004894:	931a      	str	r3, [sp, #104]	; 0x68
 8004896:	4654      	mov	r4, sl
 8004898:	2205      	movs	r2, #5
 800489a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489e:	4854      	ldr	r0, [pc, #336]	; (80049f0 <_vfiprintf_r+0x220>)
 80048a0:	f7fb fc9e 	bl	80001e0 <memchr>
 80048a4:	9a04      	ldr	r2, [sp, #16]
 80048a6:	b9d8      	cbnz	r0, 80048e0 <_vfiprintf_r+0x110>
 80048a8:	06d1      	lsls	r1, r2, #27
 80048aa:	bf44      	itt	mi
 80048ac:	2320      	movmi	r3, #32
 80048ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048b2:	0713      	lsls	r3, r2, #28
 80048b4:	bf44      	itt	mi
 80048b6:	232b      	movmi	r3, #43	; 0x2b
 80048b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048bc:	f89a 3000 	ldrb.w	r3, [sl]
 80048c0:	2b2a      	cmp	r3, #42	; 0x2a
 80048c2:	d015      	beq.n	80048f0 <_vfiprintf_r+0x120>
 80048c4:	9a07      	ldr	r2, [sp, #28]
 80048c6:	4654      	mov	r4, sl
 80048c8:	2000      	movs	r0, #0
 80048ca:	f04f 0c0a 	mov.w	ip, #10
 80048ce:	4621      	mov	r1, r4
 80048d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048d4:	3b30      	subs	r3, #48	; 0x30
 80048d6:	2b09      	cmp	r3, #9
 80048d8:	d94d      	bls.n	8004976 <_vfiprintf_r+0x1a6>
 80048da:	b1b0      	cbz	r0, 800490a <_vfiprintf_r+0x13a>
 80048dc:	9207      	str	r2, [sp, #28]
 80048de:	e014      	b.n	800490a <_vfiprintf_r+0x13a>
 80048e0:	eba0 0308 	sub.w	r3, r0, r8
 80048e4:	fa09 f303 	lsl.w	r3, r9, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	9304      	str	r3, [sp, #16]
 80048ec:	46a2      	mov	sl, r4
 80048ee:	e7d2      	b.n	8004896 <_vfiprintf_r+0xc6>
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	1d19      	adds	r1, r3, #4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	9103      	str	r1, [sp, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bfbb      	ittet	lt
 80048fc:	425b      	neglt	r3, r3
 80048fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004902:	9307      	strge	r3, [sp, #28]
 8004904:	9307      	strlt	r3, [sp, #28]
 8004906:	bfb8      	it	lt
 8004908:	9204      	strlt	r2, [sp, #16]
 800490a:	7823      	ldrb	r3, [r4, #0]
 800490c:	2b2e      	cmp	r3, #46	; 0x2e
 800490e:	d10c      	bne.n	800492a <_vfiprintf_r+0x15a>
 8004910:	7863      	ldrb	r3, [r4, #1]
 8004912:	2b2a      	cmp	r3, #42	; 0x2a
 8004914:	d134      	bne.n	8004980 <_vfiprintf_r+0x1b0>
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	9203      	str	r2, [sp, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfb8      	it	lt
 8004922:	f04f 33ff 	movlt.w	r3, #4294967295
 8004926:	3402      	adds	r4, #2
 8004928:	9305      	str	r3, [sp, #20]
 800492a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a00 <_vfiprintf_r+0x230>
 800492e:	7821      	ldrb	r1, [r4, #0]
 8004930:	2203      	movs	r2, #3
 8004932:	4650      	mov	r0, sl
 8004934:	f7fb fc54 	bl	80001e0 <memchr>
 8004938:	b138      	cbz	r0, 800494a <_vfiprintf_r+0x17a>
 800493a:	9b04      	ldr	r3, [sp, #16]
 800493c:	eba0 000a 	sub.w	r0, r0, sl
 8004940:	2240      	movs	r2, #64	; 0x40
 8004942:	4082      	lsls	r2, r0
 8004944:	4313      	orrs	r3, r2
 8004946:	3401      	adds	r4, #1
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494e:	4829      	ldr	r0, [pc, #164]	; (80049f4 <_vfiprintf_r+0x224>)
 8004950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004954:	2206      	movs	r2, #6
 8004956:	f7fb fc43 	bl	80001e0 <memchr>
 800495a:	2800      	cmp	r0, #0
 800495c:	d03f      	beq.n	80049de <_vfiprintf_r+0x20e>
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <_vfiprintf_r+0x228>)
 8004960:	bb1b      	cbnz	r3, 80049aa <_vfiprintf_r+0x1da>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	3307      	adds	r3, #7
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	3308      	adds	r3, #8
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004970:	443b      	add	r3, r7
 8004972:	9309      	str	r3, [sp, #36]	; 0x24
 8004974:	e768      	b.n	8004848 <_vfiprintf_r+0x78>
 8004976:	fb0c 3202 	mla	r2, ip, r2, r3
 800497a:	460c      	mov	r4, r1
 800497c:	2001      	movs	r0, #1
 800497e:	e7a6      	b.n	80048ce <_vfiprintf_r+0xfe>
 8004980:	2300      	movs	r3, #0
 8004982:	3401      	adds	r4, #1
 8004984:	9305      	str	r3, [sp, #20]
 8004986:	4619      	mov	r1, r3
 8004988:	f04f 0c0a 	mov.w	ip, #10
 800498c:	4620      	mov	r0, r4
 800498e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004992:	3a30      	subs	r2, #48	; 0x30
 8004994:	2a09      	cmp	r2, #9
 8004996:	d903      	bls.n	80049a0 <_vfiprintf_r+0x1d0>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0c6      	beq.n	800492a <_vfiprintf_r+0x15a>
 800499c:	9105      	str	r1, [sp, #20]
 800499e:	e7c4      	b.n	800492a <_vfiprintf_r+0x15a>
 80049a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049a4:	4604      	mov	r4, r0
 80049a6:	2301      	movs	r3, #1
 80049a8:	e7f0      	b.n	800498c <_vfiprintf_r+0x1bc>
 80049aa:	ab03      	add	r3, sp, #12
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	462a      	mov	r2, r5
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <_vfiprintf_r+0x22c>)
 80049b2:	a904      	add	r1, sp, #16
 80049b4:	4630      	mov	r0, r6
 80049b6:	f3af 8000 	nop.w
 80049ba:	4607      	mov	r7, r0
 80049bc:	1c78      	adds	r0, r7, #1
 80049be:	d1d6      	bne.n	800496e <_vfiprintf_r+0x19e>
 80049c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049c2:	07d9      	lsls	r1, r3, #31
 80049c4:	d405      	bmi.n	80049d2 <_vfiprintf_r+0x202>
 80049c6:	89ab      	ldrh	r3, [r5, #12]
 80049c8:	059a      	lsls	r2, r3, #22
 80049ca:	d402      	bmi.n	80049d2 <_vfiprintf_r+0x202>
 80049cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ce:	f7ff fdd5 	bl	800457c <__retarget_lock_release_recursive>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	065b      	lsls	r3, r3, #25
 80049d6:	f53f af1d 	bmi.w	8004814 <_vfiprintf_r+0x44>
 80049da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049dc:	e71c      	b.n	8004818 <_vfiprintf_r+0x48>
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	462a      	mov	r2, r5
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <_vfiprintf_r+0x22c>)
 80049e6:	a904      	add	r1, sp, #16
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f879 	bl	8004ae0 <_printf_i>
 80049ee:	e7e4      	b.n	80049ba <_vfiprintf_r+0x1ea>
 80049f0:	080052f4 	.word	0x080052f4
 80049f4:	080052fe 	.word	0x080052fe
 80049f8:	00000000 	.word	0x00000000
 80049fc:	080047ab 	.word	0x080047ab
 8004a00:	080052fa 	.word	0x080052fa

08004a04 <_printf_common>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4616      	mov	r6, r2
 8004a0a:	4699      	mov	r9, r3
 8004a0c:	688a      	ldr	r2, [r1, #8]
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfb8      	it	lt
 8004a18:	4613      	movlt	r3, r2
 8004a1a:	6033      	str	r3, [r6, #0]
 8004a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a20:	4607      	mov	r7, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b10a      	cbz	r2, 8004a2a <_printf_common+0x26>
 8004a26:	3301      	adds	r3, #1
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	0699      	lsls	r1, r3, #26
 8004a2e:	bf42      	ittt	mi
 8004a30:	6833      	ldrmi	r3, [r6, #0]
 8004a32:	3302      	addmi	r3, #2
 8004a34:	6033      	strmi	r3, [r6, #0]
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	f015 0506 	ands.w	r5, r5, #6
 8004a3c:	d106      	bne.n	8004a4c <_printf_common+0x48>
 8004a3e:	f104 0a19 	add.w	sl, r4, #25
 8004a42:	68e3      	ldr	r3, [r4, #12]
 8004a44:	6832      	ldr	r2, [r6, #0]
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	dc26      	bgt.n	8004a9a <_printf_common+0x96>
 8004a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a50:	1e13      	subs	r3, r2, #0
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	bf18      	it	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	0692      	lsls	r2, r2, #26
 8004a5a:	d42b      	bmi.n	8004ab4 <_printf_common+0xb0>
 8004a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a60:	4649      	mov	r1, r9
 8004a62:	4638      	mov	r0, r7
 8004a64:	47c0      	blx	r8
 8004a66:	3001      	adds	r0, #1
 8004a68:	d01e      	beq.n	8004aa8 <_printf_common+0xa4>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	6922      	ldr	r2, [r4, #16]
 8004a6e:	f003 0306 	and.w	r3, r3, #6
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf02      	ittt	eq
 8004a76:	68e5      	ldreq	r5, [r4, #12]
 8004a78:	6833      	ldreq	r3, [r6, #0]
 8004a7a:	1aed      	subeq	r5, r5, r3
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	bf0c      	ite	eq
 8004a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a84:	2500      	movne	r5, #0
 8004a86:	4293      	cmp	r3, r2
 8004a88:	bfc4      	itt	gt
 8004a8a:	1a9b      	subgt	r3, r3, r2
 8004a8c:	18ed      	addgt	r5, r5, r3
 8004a8e:	2600      	movs	r6, #0
 8004a90:	341a      	adds	r4, #26
 8004a92:	42b5      	cmp	r5, r6
 8004a94:	d11a      	bne.n	8004acc <_printf_common+0xc8>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e008      	b.n	8004aac <_printf_common+0xa8>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	47c0      	blx	r8
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d103      	bne.n	8004ab0 <_printf_common+0xac>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	e7c6      	b.n	8004a42 <_printf_common+0x3e>
 8004ab4:	18e1      	adds	r1, r4, r3
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	2030      	movs	r0, #48	; 0x30
 8004aba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004abe:	4422      	add	r2, r4
 8004ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ac8:	3302      	adds	r3, #2
 8004aca:	e7c7      	b.n	8004a5c <_printf_common+0x58>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c0      	blx	r8
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d0e6      	beq.n	8004aa8 <_printf_common+0xa4>
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7d9      	b.n	8004a92 <_printf_common+0x8e>
	...

08004ae0 <_printf_i>:
 8004ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	7e0f      	ldrb	r7, [r1, #24]
 8004ae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ae8:	2f78      	cmp	r7, #120	; 0x78
 8004aea:	4691      	mov	r9, r2
 8004aec:	4680      	mov	r8, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	469a      	mov	sl, r3
 8004af2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004af6:	d807      	bhi.n	8004b08 <_printf_i+0x28>
 8004af8:	2f62      	cmp	r7, #98	; 0x62
 8004afa:	d80a      	bhi.n	8004b12 <_printf_i+0x32>
 8004afc:	2f00      	cmp	r7, #0
 8004afe:	f000 80d4 	beq.w	8004caa <_printf_i+0x1ca>
 8004b02:	2f58      	cmp	r7, #88	; 0x58
 8004b04:	f000 80c0 	beq.w	8004c88 <_printf_i+0x1a8>
 8004b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b10:	e03a      	b.n	8004b88 <_printf_i+0xa8>
 8004b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b16:	2b15      	cmp	r3, #21
 8004b18:	d8f6      	bhi.n	8004b08 <_printf_i+0x28>
 8004b1a:	a101      	add	r1, pc, #4	; (adr r1, 8004b20 <_printf_i+0x40>)
 8004b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b09 	.word	0x08004b09
 8004b2c:	08004b09 	.word	0x08004b09
 8004b30:	08004b09 	.word	0x08004b09
 8004b34:	08004b09 	.word	0x08004b09
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b09 	.word	0x08004b09
 8004b40:	08004b09 	.word	0x08004b09
 8004b44:	08004b09 	.word	0x08004b09
 8004b48:	08004b09 	.word	0x08004b09
 8004b4c:	08004c91 	.word	0x08004c91
 8004b50:	08004bb9 	.word	0x08004bb9
 8004b54:	08004c4b 	.word	0x08004c4b
 8004b58:	08004b09 	.word	0x08004b09
 8004b5c:	08004b09 	.word	0x08004b09
 8004b60:	08004cb3 	.word	0x08004cb3
 8004b64:	08004b09 	.word	0x08004b09
 8004b68:	08004bb9 	.word	0x08004bb9
 8004b6c:	08004b09 	.word	0x08004b09
 8004b70:	08004b09 	.word	0x08004b09
 8004b74:	08004c53 	.word	0x08004c53
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	602a      	str	r2, [r5, #0]
 8004b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e09f      	b.n	8004ccc <_printf_i+0x1ec>
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	682b      	ldr	r3, [r5, #0]
 8004b90:	0607      	lsls	r7, r0, #24
 8004b92:	f103 0104 	add.w	r1, r3, #4
 8004b96:	6029      	str	r1, [r5, #0]
 8004b98:	d501      	bpl.n	8004b9e <_printf_i+0xbe>
 8004b9a:	681e      	ldr	r6, [r3, #0]
 8004b9c:	e003      	b.n	8004ba6 <_printf_i+0xc6>
 8004b9e:	0646      	lsls	r6, r0, #25
 8004ba0:	d5fb      	bpl.n	8004b9a <_printf_i+0xba>
 8004ba2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ba6:	2e00      	cmp	r6, #0
 8004ba8:	da03      	bge.n	8004bb2 <_printf_i+0xd2>
 8004baa:	232d      	movs	r3, #45	; 0x2d
 8004bac:	4276      	negs	r6, r6
 8004bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb2:	485a      	ldr	r0, [pc, #360]	; (8004d1c <_printf_i+0x23c>)
 8004bb4:	230a      	movs	r3, #10
 8004bb6:	e012      	b.n	8004bde <_printf_i+0xfe>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	6820      	ldr	r0, [r4, #0]
 8004bbc:	1d19      	adds	r1, r3, #4
 8004bbe:	6029      	str	r1, [r5, #0]
 8004bc0:	0605      	lsls	r5, r0, #24
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_i+0xe8>
 8004bc4:	681e      	ldr	r6, [r3, #0]
 8004bc6:	e002      	b.n	8004bce <_printf_i+0xee>
 8004bc8:	0641      	lsls	r1, r0, #25
 8004bca:	d5fb      	bpl.n	8004bc4 <_printf_i+0xe4>
 8004bcc:	881e      	ldrh	r6, [r3, #0]
 8004bce:	4853      	ldr	r0, [pc, #332]	; (8004d1c <_printf_i+0x23c>)
 8004bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2308      	moveq	r3, #8
 8004bd6:	230a      	movne	r3, #10
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bde:	6865      	ldr	r5, [r4, #4]
 8004be0:	60a5      	str	r5, [r4, #8]
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	bfa2      	ittt	ge
 8004be6:	6821      	ldrge	r1, [r4, #0]
 8004be8:	f021 0104 	bicge.w	r1, r1, #4
 8004bec:	6021      	strge	r1, [r4, #0]
 8004bee:	b90e      	cbnz	r6, 8004bf4 <_printf_i+0x114>
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	d04b      	beq.n	8004c8c <_printf_i+0x1ac>
 8004bf4:	4615      	mov	r5, r2
 8004bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8004bfe:	5dc7      	ldrb	r7, [r0, r7]
 8004c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c04:	4637      	mov	r7, r6
 8004c06:	42bb      	cmp	r3, r7
 8004c08:	460e      	mov	r6, r1
 8004c0a:	d9f4      	bls.n	8004bf6 <_printf_i+0x116>
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d10b      	bne.n	8004c28 <_printf_i+0x148>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	07de      	lsls	r6, r3, #31
 8004c14:	d508      	bpl.n	8004c28 <_printf_i+0x148>
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	6861      	ldr	r1, [r4, #4]
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	bfde      	ittt	le
 8004c1e:	2330      	movle	r3, #48	; 0x30
 8004c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c28:	1b52      	subs	r2, r2, r5
 8004c2a:	6122      	str	r2, [r4, #16]
 8004c2c:	f8cd a000 	str.w	sl, [sp]
 8004c30:	464b      	mov	r3, r9
 8004c32:	aa03      	add	r2, sp, #12
 8004c34:	4621      	mov	r1, r4
 8004c36:	4640      	mov	r0, r8
 8004c38:	f7ff fee4 	bl	8004a04 <_printf_common>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d14a      	bne.n	8004cd6 <_printf_i+0x1f6>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	b004      	add	sp, #16
 8004c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	4833      	ldr	r0, [pc, #204]	; (8004d20 <_printf_i+0x240>)
 8004c54:	2778      	movs	r7, #120	; 0x78
 8004c56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	6829      	ldr	r1, [r5, #0]
 8004c5e:	061f      	lsls	r7, r3, #24
 8004c60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c64:	d402      	bmi.n	8004c6c <_printf_i+0x18c>
 8004c66:	065f      	lsls	r7, r3, #25
 8004c68:	bf48      	it	mi
 8004c6a:	b2b6      	uxthmi	r6, r6
 8004c6c:	07df      	lsls	r7, r3, #31
 8004c6e:	bf48      	it	mi
 8004c70:	f043 0320 	orrmi.w	r3, r3, #32
 8004c74:	6029      	str	r1, [r5, #0]
 8004c76:	bf48      	it	mi
 8004c78:	6023      	strmi	r3, [r4, #0]
 8004c7a:	b91e      	cbnz	r6, 8004c84 <_printf_i+0x1a4>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	2310      	movs	r3, #16
 8004c86:	e7a7      	b.n	8004bd8 <_printf_i+0xf8>
 8004c88:	4824      	ldr	r0, [pc, #144]	; (8004d1c <_printf_i+0x23c>)
 8004c8a:	e7e4      	b.n	8004c56 <_printf_i+0x176>
 8004c8c:	4615      	mov	r5, r2
 8004c8e:	e7bd      	b.n	8004c0c <_printf_i+0x12c>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	6826      	ldr	r6, [r4, #0]
 8004c94:	6961      	ldr	r1, [r4, #20]
 8004c96:	1d18      	adds	r0, r3, #4
 8004c98:	6028      	str	r0, [r5, #0]
 8004c9a:	0635      	lsls	r5, r6, #24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0x1c4>
 8004ca0:	6019      	str	r1, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <_printf_i+0x1ca>
 8004ca4:	0670      	lsls	r0, r6, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0x1c0>
 8004ca8:	8019      	strh	r1, [r3, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	4615      	mov	r5, r2
 8004cb0:	e7bc      	b.n	8004c2c <_printf_i+0x14c>
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	602a      	str	r2, [r5, #0]
 8004cb8:	681d      	ldr	r5, [r3, #0]
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7fb fa8e 	bl	80001e0 <memchr>
 8004cc4:	b108      	cbz	r0, 8004cca <_printf_i+0x1ea>
 8004cc6:	1b40      	subs	r0, r0, r5
 8004cc8:	6060      	str	r0, [r4, #4]
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd4:	e7aa      	b.n	8004c2c <_printf_i+0x14c>
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4649      	mov	r1, r9
 8004cdc:	4640      	mov	r0, r8
 8004cde:	47d0      	blx	sl
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d0ad      	beq.n	8004c40 <_printf_i+0x160>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	079b      	lsls	r3, r3, #30
 8004ce8:	d413      	bmi.n	8004d12 <_printf_i+0x232>
 8004cea:	68e0      	ldr	r0, [r4, #12]
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	4298      	cmp	r0, r3
 8004cf0:	bfb8      	it	lt
 8004cf2:	4618      	movlt	r0, r3
 8004cf4:	e7a6      	b.n	8004c44 <_printf_i+0x164>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	47d0      	blx	sl
 8004d00:	3001      	adds	r0, #1
 8004d02:	d09d      	beq.n	8004c40 <_printf_i+0x160>
 8004d04:	3501      	adds	r5, #1
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	9903      	ldr	r1, [sp, #12]
 8004d0a:	1a5b      	subs	r3, r3, r1
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dcf2      	bgt.n	8004cf6 <_printf_i+0x216>
 8004d10:	e7eb      	b.n	8004cea <_printf_i+0x20a>
 8004d12:	2500      	movs	r5, #0
 8004d14:	f104 0619 	add.w	r6, r4, #25
 8004d18:	e7f5      	b.n	8004d06 <_printf_i+0x226>
 8004d1a:	bf00      	nop
 8004d1c:	08005305 	.word	0x08005305
 8004d20:	08005316 	.word	0x08005316

08004d24 <__sflush_r>:
 8004d24:	898a      	ldrh	r2, [r1, #12]
 8004d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	0710      	lsls	r0, r2, #28
 8004d2e:	460c      	mov	r4, r1
 8004d30:	d458      	bmi.n	8004de4 <__sflush_r+0xc0>
 8004d32:	684b      	ldr	r3, [r1, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	dc05      	bgt.n	8004d44 <__sflush_r+0x20>
 8004d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dc02      	bgt.n	8004d44 <__sflush_r+0x20>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d46:	2e00      	cmp	r6, #0
 8004d48:	d0f9      	beq.n	8004d3e <__sflush_r+0x1a>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d50:	682f      	ldr	r7, [r5, #0]
 8004d52:	6a21      	ldr	r1, [r4, #32]
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	d032      	beq.n	8004dbe <__sflush_r+0x9a>
 8004d58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	075a      	lsls	r2, r3, #29
 8004d5e:	d505      	bpl.n	8004d6c <__sflush_r+0x48>
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	1ac0      	subs	r0, r0, r3
 8004d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d66:	b10b      	cbz	r3, 8004d6c <__sflush_r+0x48>
 8004d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d6a:	1ac0      	subs	r0, r0, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4602      	mov	r2, r0
 8004d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d72:	6a21      	ldr	r1, [r4, #32]
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b0      	blx	r6
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	d106      	bne.n	8004d8c <__sflush_r+0x68>
 8004d7e:	6829      	ldr	r1, [r5, #0]
 8004d80:	291d      	cmp	r1, #29
 8004d82:	d82b      	bhi.n	8004ddc <__sflush_r+0xb8>
 8004d84:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <__sflush_r+0x108>)
 8004d86:	410a      	asrs	r2, r1
 8004d88:	07d6      	lsls	r6, r2, #31
 8004d8a:	d427      	bmi.n	8004ddc <__sflush_r+0xb8>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	6062      	str	r2, [r4, #4]
 8004d90:	04d9      	lsls	r1, r3, #19
 8004d92:	6922      	ldr	r2, [r4, #16]
 8004d94:	6022      	str	r2, [r4, #0]
 8004d96:	d504      	bpl.n	8004da2 <__sflush_r+0x7e>
 8004d98:	1c42      	adds	r2, r0, #1
 8004d9a:	d101      	bne.n	8004da0 <__sflush_r+0x7c>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b903      	cbnz	r3, 8004da2 <__sflush_r+0x7e>
 8004da0:	6560      	str	r0, [r4, #84]	; 0x54
 8004da2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004da4:	602f      	str	r7, [r5, #0]
 8004da6:	2900      	cmp	r1, #0
 8004da8:	d0c9      	beq.n	8004d3e <__sflush_r+0x1a>
 8004daa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dae:	4299      	cmp	r1, r3
 8004db0:	d002      	beq.n	8004db8 <__sflush_r+0x94>
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7ff fbea 	bl	800458c <_free_r>
 8004db8:	2000      	movs	r0, #0
 8004dba:	6360      	str	r0, [r4, #52]	; 0x34
 8004dbc:	e7c0      	b.n	8004d40 <__sflush_r+0x1c>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	47b0      	blx	r6
 8004dc4:	1c41      	adds	r1, r0, #1
 8004dc6:	d1c8      	bne.n	8004d5a <__sflush_r+0x36>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0c5      	beq.n	8004d5a <__sflush_r+0x36>
 8004dce:	2b1d      	cmp	r3, #29
 8004dd0:	d001      	beq.n	8004dd6 <__sflush_r+0xb2>
 8004dd2:	2b16      	cmp	r3, #22
 8004dd4:	d101      	bne.n	8004dda <__sflush_r+0xb6>
 8004dd6:	602f      	str	r7, [r5, #0]
 8004dd8:	e7b1      	b.n	8004d3e <__sflush_r+0x1a>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	e7ad      	b.n	8004d40 <__sflush_r+0x1c>
 8004de4:	690f      	ldr	r7, [r1, #16]
 8004de6:	2f00      	cmp	r7, #0
 8004de8:	d0a9      	beq.n	8004d3e <__sflush_r+0x1a>
 8004dea:	0793      	lsls	r3, r2, #30
 8004dec:	680e      	ldr	r6, [r1, #0]
 8004dee:	bf08      	it	eq
 8004df0:	694b      	ldreq	r3, [r1, #20]
 8004df2:	600f      	str	r7, [r1, #0]
 8004df4:	bf18      	it	ne
 8004df6:	2300      	movne	r3, #0
 8004df8:	eba6 0807 	sub.w	r8, r6, r7
 8004dfc:	608b      	str	r3, [r1, #8]
 8004dfe:	f1b8 0f00 	cmp.w	r8, #0
 8004e02:	dd9c      	ble.n	8004d3e <__sflush_r+0x1a>
 8004e04:	6a21      	ldr	r1, [r4, #32]
 8004e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e08:	4643      	mov	r3, r8
 8004e0a:	463a      	mov	r2, r7
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b0      	blx	r6
 8004e10:	2800      	cmp	r0, #0
 8004e12:	dc06      	bgt.n	8004e22 <__sflush_r+0xfe>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	e78e      	b.n	8004d40 <__sflush_r+0x1c>
 8004e22:	4407      	add	r7, r0
 8004e24:	eba8 0800 	sub.w	r8, r8, r0
 8004e28:	e7e9      	b.n	8004dfe <__sflush_r+0xda>
 8004e2a:	bf00      	nop
 8004e2c:	dfbffffe 	.word	0xdfbffffe

08004e30 <_fflush_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	690b      	ldr	r3, [r1, #16]
 8004e34:	4605      	mov	r5, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	b913      	cbnz	r3, 8004e40 <_fflush_r+0x10>
 8004e3a:	2500      	movs	r5, #0
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	b118      	cbz	r0, 8004e4a <_fflush_r+0x1a>
 8004e42:	6a03      	ldr	r3, [r0, #32]
 8004e44:	b90b      	cbnz	r3, 8004e4a <_fflush_r+0x1a>
 8004e46:	f7ff fa81 	bl	800434c <__sinit>
 8004e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f3      	beq.n	8004e3a <_fflush_r+0xa>
 8004e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e54:	07d0      	lsls	r0, r2, #31
 8004e56:	d404      	bmi.n	8004e62 <_fflush_r+0x32>
 8004e58:	0599      	lsls	r1, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_fflush_r+0x32>
 8004e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5e:	f7ff fb8c 	bl	800457a <__retarget_lock_acquire_recursive>
 8004e62:	4628      	mov	r0, r5
 8004e64:	4621      	mov	r1, r4
 8004e66:	f7ff ff5d 	bl	8004d24 <__sflush_r>
 8004e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e6c:	07da      	lsls	r2, r3, #31
 8004e6e:	4605      	mov	r5, r0
 8004e70:	d4e4      	bmi.n	8004e3c <_fflush_r+0xc>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	059b      	lsls	r3, r3, #22
 8004e76:	d4e1      	bmi.n	8004e3c <_fflush_r+0xc>
 8004e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7a:	f7ff fb7f 	bl	800457c <__retarget_lock_release_recursive>
 8004e7e:	e7dd      	b.n	8004e3c <_fflush_r+0xc>

08004e80 <__swbuf_r>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	460e      	mov	r6, r1
 8004e84:	4614      	mov	r4, r2
 8004e86:	4605      	mov	r5, r0
 8004e88:	b118      	cbz	r0, 8004e92 <__swbuf_r+0x12>
 8004e8a:	6a03      	ldr	r3, [r0, #32]
 8004e8c:	b90b      	cbnz	r3, 8004e92 <__swbuf_r+0x12>
 8004e8e:	f7ff fa5d 	bl	800434c <__sinit>
 8004e92:	69a3      	ldr	r3, [r4, #24]
 8004e94:	60a3      	str	r3, [r4, #8]
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	071a      	lsls	r2, r3, #28
 8004e9a:	d525      	bpl.n	8004ee8 <__swbuf_r+0x68>
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	b31b      	cbz	r3, 8004ee8 <__swbuf_r+0x68>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	6922      	ldr	r2, [r4, #16]
 8004ea4:	1a98      	subs	r0, r3, r2
 8004ea6:	6963      	ldr	r3, [r4, #20]
 8004ea8:	b2f6      	uxtb	r6, r6
 8004eaa:	4283      	cmp	r3, r0
 8004eac:	4637      	mov	r7, r6
 8004eae:	dc04      	bgt.n	8004eba <__swbuf_r+0x3a>
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f7ff ffbc 	bl	8004e30 <_fflush_r>
 8004eb8:	b9e0      	cbnz	r0, 8004ef4 <__swbuf_r+0x74>
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60a3      	str	r3, [r4, #8]
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	6022      	str	r2, [r4, #0]
 8004ec6:	701e      	strb	r6, [r3, #0]
 8004ec8:	6962      	ldr	r2, [r4, #20]
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d004      	beq.n	8004eda <__swbuf_r+0x5a>
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	07db      	lsls	r3, r3, #31
 8004ed4:	d506      	bpl.n	8004ee4 <__swbuf_r+0x64>
 8004ed6:	2e0a      	cmp	r6, #10
 8004ed8:	d104      	bne.n	8004ee4 <__swbuf_r+0x64>
 8004eda:	4621      	mov	r1, r4
 8004edc:	4628      	mov	r0, r5
 8004ede:	f7ff ffa7 	bl	8004e30 <_fflush_r>
 8004ee2:	b938      	cbnz	r0, 8004ef4 <__swbuf_r+0x74>
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 f806 	bl	8004efc <__swsetup_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d0d5      	beq.n	8004ea0 <__swbuf_r+0x20>
 8004ef4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ef8:	e7f4      	b.n	8004ee4 <__swbuf_r+0x64>
	...

08004efc <__swsetup_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <__swsetup_r+0xac>)
 8004f00:	4605      	mov	r5, r0
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	460c      	mov	r4, r1
 8004f06:	b118      	cbz	r0, 8004f10 <__swsetup_r+0x14>
 8004f08:	6a03      	ldr	r3, [r0, #32]
 8004f0a:	b90b      	cbnz	r3, 8004f10 <__swsetup_r+0x14>
 8004f0c:	f7ff fa1e 	bl	800434c <__sinit>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f16:	0718      	lsls	r0, r3, #28
 8004f18:	d422      	bmi.n	8004f60 <__swsetup_r+0x64>
 8004f1a:	06d9      	lsls	r1, r3, #27
 8004f1c:	d407      	bmi.n	8004f2e <__swsetup_r+0x32>
 8004f1e:	2309      	movs	r3, #9
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e034      	b.n	8004f98 <__swsetup_r+0x9c>
 8004f2e:	0758      	lsls	r0, r3, #29
 8004f30:	d512      	bpl.n	8004f58 <__swsetup_r+0x5c>
 8004f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f34:	b141      	cbz	r1, 8004f48 <__swsetup_r+0x4c>
 8004f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	d002      	beq.n	8004f44 <__swsetup_r+0x48>
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7ff fb24 	bl	800458c <_free_r>
 8004f44:	2300      	movs	r3, #0
 8004f46:	6363      	str	r3, [r4, #52]	; 0x34
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	2300      	movs	r3, #0
 8004f52:	6063      	str	r3, [r4, #4]
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	f043 0308 	orr.w	r3, r3, #8
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	b94b      	cbnz	r3, 8004f78 <__swsetup_r+0x7c>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6e:	d003      	beq.n	8004f78 <__swsetup_r+0x7c>
 8004f70:	4621      	mov	r1, r4
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f894 	bl	80050a0 <__smakebuf_r>
 8004f78:	89a0      	ldrh	r0, [r4, #12]
 8004f7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f7e:	f010 0301 	ands.w	r3, r0, #1
 8004f82:	d00a      	beq.n	8004f9a <__swsetup_r+0x9e>
 8004f84:	2300      	movs	r3, #0
 8004f86:	60a3      	str	r3, [r4, #8]
 8004f88:	6963      	ldr	r3, [r4, #20]
 8004f8a:	425b      	negs	r3, r3
 8004f8c:	61a3      	str	r3, [r4, #24]
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	b943      	cbnz	r3, 8004fa4 <__swsetup_r+0xa8>
 8004f92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f96:	d1c4      	bne.n	8004f22 <__swsetup_r+0x26>
 8004f98:	bd38      	pop	{r3, r4, r5, pc}
 8004f9a:	0781      	lsls	r1, r0, #30
 8004f9c:	bf58      	it	pl
 8004f9e:	6963      	ldrpl	r3, [r4, #20]
 8004fa0:	60a3      	str	r3, [r4, #8]
 8004fa2:	e7f4      	b.n	8004f8e <__swsetup_r+0x92>
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e7f7      	b.n	8004f98 <__swsetup_r+0x9c>
 8004fa8:	20000064 	.word	0x20000064

08004fac <_raise_r>:
 8004fac:	291f      	cmp	r1, #31
 8004fae:	b538      	push	{r3, r4, r5, lr}
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	d904      	bls.n	8004fc0 <_raise_r+0x14>
 8004fb6:	2316      	movs	r3, #22
 8004fb8:	6003      	str	r3, [r0, #0]
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004fc2:	b112      	cbz	r2, 8004fca <_raise_r+0x1e>
 8004fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fc8:	b94b      	cbnz	r3, 8004fde <_raise_r+0x32>
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 f830 	bl	8005030 <_getpid_r>
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4601      	mov	r1, r0
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fda:	f000 b817 	b.w	800500c <_kill_r>
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d00a      	beq.n	8004ff8 <_raise_r+0x4c>
 8004fe2:	1c59      	adds	r1, r3, #1
 8004fe4:	d103      	bne.n	8004fee <_raise_r+0x42>
 8004fe6:	2316      	movs	r3, #22
 8004fe8:	6003      	str	r3, [r0, #0]
 8004fea:	2001      	movs	r0, #1
 8004fec:	e7e7      	b.n	8004fbe <_raise_r+0x12>
 8004fee:	2400      	movs	r4, #0
 8004ff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	4798      	blx	r3
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	e7e0      	b.n	8004fbe <_raise_r+0x12>

08004ffc <raise>:
 8004ffc:	4b02      	ldr	r3, [pc, #8]	; (8005008 <raise+0xc>)
 8004ffe:	4601      	mov	r1, r0
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	f7ff bfd3 	b.w	8004fac <_raise_r>
 8005006:	bf00      	nop
 8005008:	20000064 	.word	0x20000064

0800500c <_kill_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d07      	ldr	r5, [pc, #28]	; (800502c <_kill_r+0x20>)
 8005010:	2300      	movs	r3, #0
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	f7fc fbf1 	bl	8001800 <_kill>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d102      	bne.n	8005028 <_kill_r+0x1c>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	b103      	cbz	r3, 8005028 <_kill_r+0x1c>
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	bd38      	pop	{r3, r4, r5, pc}
 800502a:	bf00      	nop
 800502c:	20000348 	.word	0x20000348

08005030 <_getpid_r>:
 8005030:	f7fc bbde 	b.w	80017f0 <_getpid>

08005034 <_sbrk_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	; (8005050 <_sbrk_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fc fc4a 	bl	80018d8 <_sbrk>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_sbrk_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_sbrk_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000348 	.word	0x20000348

08005054 <__swhatbuf_r>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	460c      	mov	r4, r1
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	2900      	cmp	r1, #0
 800505e:	b096      	sub	sp, #88	; 0x58
 8005060:	4615      	mov	r5, r2
 8005062:	461e      	mov	r6, r3
 8005064:	da0d      	bge.n	8005082 <__swhatbuf_r+0x2e>
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	f013 0f80 	tst.w	r3, #128	; 0x80
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	bf0c      	ite	eq
 8005072:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005076:	2340      	movne	r3, #64	; 0x40
 8005078:	2000      	movs	r0, #0
 800507a:	6031      	str	r1, [r6, #0]
 800507c:	602b      	str	r3, [r5, #0]
 800507e:	b016      	add	sp, #88	; 0x58
 8005080:	bd70      	pop	{r4, r5, r6, pc}
 8005082:	466a      	mov	r2, sp
 8005084:	f000 f848 	bl	8005118 <_fstat_r>
 8005088:	2800      	cmp	r0, #0
 800508a:	dbec      	blt.n	8005066 <__swhatbuf_r+0x12>
 800508c:	9901      	ldr	r1, [sp, #4]
 800508e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005092:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005096:	4259      	negs	r1, r3
 8005098:	4159      	adcs	r1, r3
 800509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509e:	e7eb      	b.n	8005078 <__swhatbuf_r+0x24>

080050a0 <__smakebuf_r>:
 80050a0:	898b      	ldrh	r3, [r1, #12]
 80050a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a4:	079d      	lsls	r5, r3, #30
 80050a6:	4606      	mov	r6, r0
 80050a8:	460c      	mov	r4, r1
 80050aa:	d507      	bpl.n	80050bc <__smakebuf_r+0x1c>
 80050ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	6123      	str	r3, [r4, #16]
 80050b4:	2301      	movs	r3, #1
 80050b6:	6163      	str	r3, [r4, #20]
 80050b8:	b002      	add	sp, #8
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	ab01      	add	r3, sp, #4
 80050be:	466a      	mov	r2, sp
 80050c0:	f7ff ffc8 	bl	8005054 <__swhatbuf_r>
 80050c4:	9900      	ldr	r1, [sp, #0]
 80050c6:	4605      	mov	r5, r0
 80050c8:	4630      	mov	r0, r6
 80050ca:	f7ff facb 	bl	8004664 <_malloc_r>
 80050ce:	b948      	cbnz	r0, 80050e4 <__smakebuf_r+0x44>
 80050d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d4:	059a      	lsls	r2, r3, #22
 80050d6:	d4ef      	bmi.n	80050b8 <__smakebuf_r+0x18>
 80050d8:	f023 0303 	bic.w	r3, r3, #3
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	e7e3      	b.n	80050ac <__smakebuf_r+0xc>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	6020      	str	r0, [r4, #0]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	6120      	str	r0, [r4, #16]
 80050f6:	b15b      	cbz	r3, 8005110 <__smakebuf_r+0x70>
 80050f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f81d 	bl	800513c <_isatty_r>
 8005102:	b128      	cbz	r0, 8005110 <__smakebuf_r+0x70>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	431d      	orrs	r5, r3
 8005114:	81a5      	strh	r5, [r4, #12]
 8005116:	e7cf      	b.n	80050b8 <__smakebuf_r+0x18>

08005118 <_fstat_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d07      	ldr	r5, [pc, #28]	; (8005138 <_fstat_r+0x20>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	f7fc fbae 	bl	8001886 <_fstat>
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	d102      	bne.n	8005134 <_fstat_r+0x1c>
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	b103      	cbz	r3, 8005134 <_fstat_r+0x1c>
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	bd38      	pop	{r3, r4, r5, pc}
 8005136:	bf00      	nop
 8005138:	20000348 	.word	0x20000348

0800513c <_isatty_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d06      	ldr	r5, [pc, #24]	; (8005158 <_isatty_r+0x1c>)
 8005140:	2300      	movs	r3, #0
 8005142:	4604      	mov	r4, r0
 8005144:	4608      	mov	r0, r1
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	f7fc fbad 	bl	80018a6 <_isatty>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_isatty_r+0x1a>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_isatty_r+0x1a>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20000348 	.word	0x20000348

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
